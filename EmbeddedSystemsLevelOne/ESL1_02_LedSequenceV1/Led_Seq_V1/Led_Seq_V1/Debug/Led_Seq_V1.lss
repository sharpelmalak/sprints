
Led_Seq_V1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc5  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000080e  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000913  00000000  00000000  00001e27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000273c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000550  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000aed  00000000  00000000  00002dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00003899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  54:	77 00       	.word	0x0077	; ????
  56:	7d 00       	.word	0x007d	; ????
  58:	83 00       	.word	0x0083	; ????
  5a:	89 00       	.word	0x0089	; ????
  5c:	8f 00       	.word	0x008f	; ????
  5e:	95 00       	.word	0x0095	; ????
  60:	9b 00       	.word	0x009b	; ????
  62:	a1 00       	.word	0x00a1	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
#include "../ECUAL/Button/button.h"
#include "../ECUAL/LED/led.h"


int main(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	1f 92       	push	r1
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	// test function
	DIO_init_TEST();
  86:	0e 94 49 02 	call	0x492	; 0x492 <DIO_init_TEST>
	// initialize four leds
     LED_init(DIO_PIN0,DIO_PORTA);
  8a:	60 e0       	ldi	r22, 0x00	; 0
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
     LED_init(DIO_PIN1,DIO_PORTA);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
     LED_init(DIO_PIN2,DIO_PORTA);
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	82 e0       	ldi	r24, 0x02	; 2
  9e:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
     LED_init(DIO_PIN3,DIO_PORTA);
  a2:	60 e0       	ldi	r22, 0x00	; 0
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 b2 00 	call	0x164	; 0x164 <LED_init>
     
	 //initialize one button
     Button_init(DIO_PIN0,DIO_PORTC);
  aa:	62 e0       	ldi	r22, 0x02	; 2
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 a7 00 	call	0x14e	; 0x14e <Button_init>
     
     uint8_t btnValue = LOW; // Button initially low 
  b2:	19 82       	std	Y+1, r1	; 0x01
     uint8_t flag = 0;
  b4:	10 e0       	ldi	r17, 0x00	; 0
     while (1)
     {
	     Button_read(DIO_PIN0,DIO_PORTC,&btnValue);
  b6:	ae 01       	movw	r20, r28
  b8:	4f 5f       	subi	r20, 0xFF	; 255
  ba:	5f 4f       	sbci	r21, 0xFF	; 255
  bc:	62 e0       	ldi	r22, 0x02	; 2
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	0e 94 ad 00 	call	0x15a	; 0x15a <Button_read>
	     if(btnValue){
  c4:	89 81       	ldd	r24, Y+1	; 0x01
  c6:	88 23       	and	r24, r24
  c8:	b1 f3       	breq	.-20     	; 0xb6 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f e5       	ldi	r18, 0x5F	; 95
  cc:	8a ee       	ldi	r24, 0xEA	; 234
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x54>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x5e>
  da:	00 00       	nop
		     _delay_ms(300);
		     switch(flag)
  dc:	e1 2f       	mov	r30, r17
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	e8 30       	cpi	r30, 0x08	; 8
  e2:	f1 05       	cpc	r31, r1
  e4:	40 f7       	brcc	.-48     	; 0xb6 <main+0x3a>
  e6:	e6 5d       	subi	r30, 0xD6	; 214
  e8:	ff 4f       	sbci	r31, 0xFF	; 255
  ea:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__tablejump2__>
		     {
			     case 0:
			     LED_on(DIO_PIN0,DIO_PORTA);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			     flag++;
  f6:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
  f8:	de cf       	rjmp	.-68     	; 0xb6 <main+0x3a>
			     case 1:
			     LED_on(DIO_PIN1,DIO_PORTA);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			     flag++;
 102:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 104:	d8 cf       	rjmp	.-80     	; 0xb6 <main+0x3a>
			     case 2:
			     LED_on(DIO_PIN2,DIO_PORTA);
 106:	60 e0       	ldi	r22, 0x00	; 0
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			     flag++;
 10e:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 110:	d2 cf       	rjmp	.-92     	; 0xb6 <main+0x3a>
			     case 3:
			     LED_on(DIO_PIN3,DIO_PORTA);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 b8 00 	call	0x170	; 0x170 <LED_on>
			     flag++;
 11a:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 11c:	cc cf       	rjmp	.-104    	; 0xb6 <main+0x3a>
			     case 4:
			     LED_off(DIO_PIN0,DIO_PORTA);
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 be 00 	call	0x17c	; 0x17c <LED_off>
			     flag++;
 126:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 128:	c6 cf       	rjmp	.-116    	; 0xb6 <main+0x3a>
			     case 5:
			     LED_off(DIO_PIN1,DIO_PORTA);
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 be 00 	call	0x17c	; 0x17c <LED_off>
			     flag++;
 132:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 134:	c0 cf       	rjmp	.-128    	; 0xb6 <main+0x3a>
			     case 6:
			     LED_off(DIO_PIN2,DIO_PORTA);
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	0e 94 be 00 	call	0x17c	; 0x17c <LED_off>
			     flag++;
 13e:	1f 5f       	subi	r17, 0xFF	; 255
			     break;
 140:	ba cf       	rjmp	.-140    	; 0xb6 <main+0x3a>
			     case 7:
			     LED_off(DIO_PIN3,DIO_PORTA);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 be 00 	call	0x17c	; 0x17c <LED_off>
			     flag=0;
 14a:	10 e0       	ldi	r17, 0x00	; 0
			     break;
 14c:	b4 cf       	rjmp	.-152    	; 0xb6 <main+0x3a>

0000014e <Button_init>:
return      : return BTN_OK if the PIN initializes correctly, BTN_NOT_OK otherwise
*/

EN_BTN_Error_t Button_init(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber)
{
	if(!DIO_init(pinNumber,portNumber,INPUT))return BTN_OK;
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
 154:	81 11       	cpse	r24, r1
	else return BTN_NOT_OK;
 156:	81 e0       	ldi	r24, 0x01	; 1
}
 158:	08 95       	ret

0000015a <Button_read>:
ARGS        : take PIN Number and PORT Number and the address of the variable
return      : return BTN_OK if the PIN read correctly, BTN_NOT_OK otherwise
*/
EN_BTN_Error_t Button_read(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumbert,uint8_t *value)
{
	if(!DIO_read(pinNumber,portNumbert,value))return BTN_OK;
 15a:	0e 94 02 02 	call	0x404	; 0x404 <DIO_read>
 15e:	81 11       	cpse	r24, r1
	else return BTN_NOT_OK;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	08 95       	ret

00000164 <LED_init>:
#include "led.h"

// initialize LED as output 
EN_LED_Error_t LED_init(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber)
{
	if(!DIO_init(pinNumber,portNumber,OUTPUT))return LED_OK;
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
 16a:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 16c:	81 e0       	ldi	r24, 0x01	; 1
}
 16e:	08 95       	ret

00000170 <LED_on>:
EN_LED_Error_t LED_on(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber)
{
	if(!DIO_write(pinNumber,portNumber,HIGH))return LED_OK;
 170:	41 e0       	ldi	r20, 0x01	; 1
 172:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_write>
 176:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
}
 17a:	08 95       	ret

0000017c <LED_off>:
EN_LED_Error_t LED_off(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(!DIO_write(pinNumber,portNumber,LOW))return LED_OK;
 17c:	40 e0       	ldi	r20, 0x00	; 0
 17e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_write>
 182:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 184:	81 e0       	ldi	r24, 0x01	; 1
}
 186:	08 95       	ret

00000188 <DIO_init>:
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 188:	88 30       	cpi	r24, 0x08	; 8
 18a:	08 f0       	brcs	.+2      	; 0x18e <DIO_init+0x6>
 18c:	90 c0       	rjmp	.+288    	; 0x2ae <DIO_init+0x126>
 18e:	61 30       	cpi	r22, 0x01	; 1
 190:	51 f1       	breq	.+84     	; 0x1e6 <DIO_init+0x5e>
 192:	38 f0       	brcs	.+14     	; 0x1a2 <DIO_init+0x1a>
 194:	62 30       	cpi	r22, 0x02	; 2
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_init+0x12>
 198:	48 c0       	rjmp	.+144    	; 0x22a <DIO_init+0xa2>
 19a:	63 30       	cpi	r22, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_init+0x18>
 19e:	66 c0       	rjmp	.+204    	; 0x26c <DIO_init+0xe4>
 1a0:	88 c0       	rjmp	.+272    	; 0x2b2 <DIO_init+0x12a>
 1a2:	41 11       	cpse	r20, r1
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <DIO_init+0x3c>
 1a6:	4a b3       	in	r20, 0x1a	; 26
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_init+0x2c>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_init+0x28>
 1b8:	cb 01       	movw	r24, r22
 1ba:	80 95       	com	r24
 1bc:	84 23       	and	r24, r20
 1be:	8a bb       	out	0x1a, r24	; 26
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	08 95       	ret
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	09 f0       	breq	.+2      	; 0x1ca <DIO_init+0x42>
 1c8:	76 c0       	rjmp	.+236    	; 0x2b6 <DIO_init+0x12e>
 1ca:	4a b3       	in	r20, 0x1a	; 26
 1cc:	21 e0       	ldi	r18, 0x01	; 1
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	b9 01       	movw	r22, r18
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <DIO_init+0x50>
 1d4:	66 0f       	add	r22, r22
 1d6:	77 1f       	adc	r23, r23
 1d8:	8a 95       	dec	r24
 1da:	e2 f7       	brpl	.-8      	; 0x1d4 <DIO_init+0x4c>
 1dc:	cb 01       	movw	r24, r22
 1de:	84 2b       	or	r24, r20
 1e0:	8a bb       	out	0x1a, r24	; 26
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	08 95       	ret
 1e6:	41 11       	cpse	r20, r1
 1e8:	0f c0       	rjmp	.+30     	; 0x208 <DIO_init+0x80>
 1ea:	47 b3       	in	r20, 0x17	; 23
 1ec:	21 e0       	ldi	r18, 0x01	; 1
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	b9 01       	movw	r22, r18
 1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <DIO_init+0x70>
 1f4:	66 0f       	add	r22, r22
 1f6:	77 1f       	adc	r23, r23
 1f8:	8a 95       	dec	r24
 1fa:	e2 f7       	brpl	.-8      	; 0x1f4 <DIO_init+0x6c>
 1fc:	cb 01       	movw	r24, r22
 1fe:	80 95       	com	r24
 200:	84 23       	and	r24, r20
 202:	87 bb       	out	0x17, r24	; 23
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
 208:	41 30       	cpi	r20, 0x01	; 1
 20a:	09 f0       	breq	.+2      	; 0x20e <DIO_init+0x86>
 20c:	56 c0       	rjmp	.+172    	; 0x2ba <DIO_init+0x132>
 20e:	47 b3       	in	r20, 0x17	; 23
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	b9 01       	movw	r22, r18
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_init+0x94>
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	8a 95       	dec	r24
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_init+0x90>
 220:	cb 01       	movw	r24, r22
 222:	84 2b       	or	r24, r20
 224:	87 bb       	out	0x17, r24	; 23
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	08 95       	ret
 22a:	41 11       	cpse	r20, r1
 22c:	0f c0       	rjmp	.+30     	; 0x24c <DIO_init+0xc4>
 22e:	44 b3       	in	r20, 0x14	; 20
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	b9 01       	movw	r22, r18
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_init+0xb4>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	8a 95       	dec	r24
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_init+0xb0>
 240:	cb 01       	movw	r24, r22
 242:	80 95       	com	r24
 244:	84 23       	and	r24, r20
 246:	84 bb       	out	0x14, r24	; 20
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	08 95       	ret
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	b9 f5       	brne	.+110    	; 0x2be <DIO_init+0x136>
 250:	44 b3       	in	r20, 0x14	; 20
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_init+0xd6>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_init+0xd2>
 262:	cb 01       	movw	r24, r22
 264:	84 2b       	or	r24, r20
 266:	84 bb       	out	0x14, r24	; 20
 268:	80 e0       	ldi	r24, 0x00	; 0
 26a:	08 95       	ret
 26c:	41 11       	cpse	r20, r1
 26e:	0f c0       	rjmp	.+30     	; 0x28e <DIO_init+0x106>
 270:	41 b3       	in	r20, 0x11	; 17
 272:	21 e0       	ldi	r18, 0x01	; 1
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	b9 01       	movw	r22, r18
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_init+0xf6>
 27a:	66 0f       	add	r22, r22
 27c:	77 1f       	adc	r23, r23
 27e:	8a 95       	dec	r24
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_init+0xf2>
 282:	cb 01       	movw	r24, r22
 284:	80 95       	com	r24
 286:	84 23       	and	r24, r20
 288:	81 bb       	out	0x11, r24	; 17
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	08 95       	ret
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	c1 f4       	brne	.+48     	; 0x2c2 <DIO_init+0x13a>
 292:	41 b3       	in	r20, 0x11	; 17
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_init+0x118>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	8a 95       	dec	r24
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_init+0x114>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	81 bb       	out	0x11, r24	; 17
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	08 95       	ret
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	08 95       	ret
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	08 95       	ret
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	08 95       	ret
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	08 95       	ret
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	08 95       	ret

000002c6 <DIO_write>:
 2c6:	88 30       	cpi	r24, 0x08	; 8
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <DIO_write+0x6>
 2ca:	90 c0       	rjmp	.+288    	; 0x3ec <DIO_write+0x126>
 2cc:	61 30       	cpi	r22, 0x01	; 1
 2ce:	51 f1       	breq	.+84     	; 0x324 <DIO_write+0x5e>
 2d0:	38 f0       	brcs	.+14     	; 0x2e0 <DIO_write+0x1a>
 2d2:	62 30       	cpi	r22, 0x02	; 2
 2d4:	09 f4       	brne	.+2      	; 0x2d8 <DIO_write+0x12>
 2d6:	48 c0       	rjmp	.+144    	; 0x368 <DIO_write+0xa2>
 2d8:	63 30       	cpi	r22, 0x03	; 3
 2da:	09 f4       	brne	.+2      	; 0x2de <DIO_write+0x18>
 2dc:	66 c0       	rjmp	.+204    	; 0x3aa <DIO_write+0xe4>
 2de:	88 c0       	rjmp	.+272    	; 0x3f0 <DIO_write+0x12a>
 2e0:	41 11       	cpse	r20, r1
 2e2:	0f c0       	rjmp	.+30     	; 0x302 <DIO_write+0x3c>
 2e4:	4b b3       	in	r20, 0x1b	; 27
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	b9 01       	movw	r22, r18
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <DIO_write+0x2c>
 2ee:	66 0f       	add	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	8a 95       	dec	r24
 2f4:	e2 f7       	brpl	.-8      	; 0x2ee <DIO_write+0x28>
 2f6:	cb 01       	movw	r24, r22
 2f8:	80 95       	com	r24
 2fa:	84 23       	and	r24, r20
 2fc:	8b bb       	out	0x1b, r24	; 27
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret
 302:	41 30       	cpi	r20, 0x01	; 1
 304:	09 f0       	breq	.+2      	; 0x308 <DIO_write+0x42>
 306:	76 c0       	rjmp	.+236    	; 0x3f4 <DIO_write+0x12e>
 308:	4b b3       	in	r20, 0x1b	; 27
 30a:	21 e0       	ldi	r18, 0x01	; 1
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	b9 01       	movw	r22, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_write+0x50>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	8a 95       	dec	r24
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_write+0x4c>
 31a:	cb 01       	movw	r24, r22
 31c:	84 2b       	or	r24, r20
 31e:	8b bb       	out	0x1b, r24	; 27
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	08 95       	ret
 324:	41 11       	cpse	r20, r1
 326:	0f c0       	rjmp	.+30     	; 0x346 <DIO_write+0x80>
 328:	48 b3       	in	r20, 0x18	; 24
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	b9 01       	movw	r22, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_write+0x70>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	8a 95       	dec	r24
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_write+0x6c>
 33a:	cb 01       	movw	r24, r22
 33c:	80 95       	com	r24
 33e:	84 23       	and	r24, r20
 340:	88 bb       	out	0x18, r24	; 24
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	08 95       	ret
 346:	41 30       	cpi	r20, 0x01	; 1
 348:	09 f0       	breq	.+2      	; 0x34c <DIO_write+0x86>
 34a:	56 c0       	rjmp	.+172    	; 0x3f8 <DIO_write+0x132>
 34c:	48 b3       	in	r20, 0x18	; 24
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	b9 01       	movw	r22, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_write+0x94>
 356:	66 0f       	add	r22, r22
 358:	77 1f       	adc	r23, r23
 35a:	8a 95       	dec	r24
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_write+0x90>
 35e:	cb 01       	movw	r24, r22
 360:	84 2b       	or	r24, r20
 362:	88 bb       	out	0x18, r24	; 24
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret
 368:	41 11       	cpse	r20, r1
 36a:	0f c0       	rjmp	.+30     	; 0x38a <DIO_write+0xc4>
 36c:	45 b3       	in	r20, 0x15	; 21
 36e:	21 e0       	ldi	r18, 0x01	; 1
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	b9 01       	movw	r22, r18
 374:	02 c0       	rjmp	.+4      	; 0x37a <DIO_write+0xb4>
 376:	66 0f       	add	r22, r22
 378:	77 1f       	adc	r23, r23
 37a:	8a 95       	dec	r24
 37c:	e2 f7       	brpl	.-8      	; 0x376 <DIO_write+0xb0>
 37e:	cb 01       	movw	r24, r22
 380:	80 95       	com	r24
 382:	84 23       	and	r24, r20
 384:	85 bb       	out	0x15, r24	; 21
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	08 95       	ret
 38a:	41 30       	cpi	r20, 0x01	; 1
 38c:	b9 f5       	brne	.+110    	; 0x3fc <DIO_write+0x136>
 38e:	45 b3       	in	r20, 0x15	; 21
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	b9 01       	movw	r22, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_write+0xd6>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	8a 95       	dec	r24
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_write+0xd2>
 3a0:	cb 01       	movw	r24, r22
 3a2:	84 2b       	or	r24, r20
 3a4:	85 bb       	out	0x15, r24	; 21
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	08 95       	ret
 3aa:	41 11       	cpse	r20, r1
 3ac:	0f c0       	rjmp	.+30     	; 0x3cc <DIO_write+0x106>
 3ae:	42 b3       	in	r20, 0x12	; 18
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	b9 01       	movw	r22, r18
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <DIO_write+0xf6>
 3b8:	66 0f       	add	r22, r22
 3ba:	77 1f       	adc	r23, r23
 3bc:	8a 95       	dec	r24
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <DIO_write+0xf2>
 3c0:	cb 01       	movw	r24, r22
 3c2:	80 95       	com	r24
 3c4:	84 23       	and	r24, r20
 3c6:	82 bb       	out	0x12, r24	; 18
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	08 95       	ret
 3cc:	41 30       	cpi	r20, 0x01	; 1
 3ce:	c1 f4       	brne	.+48     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d0:	42 b3       	in	r20, 0x12	; 18
 3d2:	21 e0       	ldi	r18, 0x01	; 1
 3d4:	30 e0       	ldi	r19, 0x00	; 0
 3d6:	b9 01       	movw	r22, r18
 3d8:	02 c0       	rjmp	.+4      	; 0x3de <DIO_write+0x118>
 3da:	66 0f       	add	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	8a 95       	dec	r24
 3e0:	e2 f7       	brpl	.-8      	; 0x3da <DIO_write+0x114>
 3e2:	cb 01       	movw	r24, r22
 3e4:	84 2b       	or	r24, r20
 3e6:	82 bb       	out	0x12, r24	; 18
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	08 95       	ret
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	08 95       	ret
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	08 95       	ret
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	08 95       	ret
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	08 95       	ret
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	08 95       	ret

00000404 <DIO_read>:
ARGS        : take PIN Number and PORT Number and pointer to the variable
return      : return DIO_OK if the PIN value stored correctly , DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_read(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber, uint8_t * value){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	08 f0       	brcs	.+2      	; 0x40a <DIO_read+0x6>
 408:	40 c0       	rjmp	.+128    	; 0x48a <DIO_read+0x86>
	switch(portNumber){
 40a:	61 30       	cpi	r22, 0x01	; 1
 40c:	a1 f0       	breq	.+40     	; 0x436 <DIO_read+0x32>
 40e:	28 f0       	brcs	.+10     	; 0x41a <DIO_read+0x16>
 410:	62 30       	cpi	r22, 0x02	; 2
 412:	f9 f0       	breq	.+62     	; 0x452 <DIO_read+0x4e>
 414:	63 30       	cpi	r22, 0x03	; 3
 416:	59 f1       	breq	.+86     	; 0x46e <DIO_read+0x6a>
 418:	3a c0       	rjmp	.+116    	; 0x48e <DIO_read+0x8a>
		case DIO_PORTA:
		*value = GET_BIT(PINA,pinNumber);
 41a:	29 b3       	in	r18, 0x19	; 25
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <DIO_read+0x22>
 422:	75 95       	asr	r23
 424:	67 95       	ror	r22
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <DIO_read+0x1e>
 42a:	cb 01       	movw	r24, r22
 42c:	81 70       	andi	r24, 0x01	; 1
 42e:	fa 01       	movw	r30, r20
 430:	80 83       	st	Z, r24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 432:	80 e0       	ldi	r24, 0x00	; 0
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		*value = GET_BIT(PINA,pinNumber);
		break;
 434:	08 95       	ret
		case DIO_PORTB:
		*value = GET_BIT(PINB,pinNumber);
 436:	26 b3       	in	r18, 0x16	; 22
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <DIO_read+0x3e>
 43e:	75 95       	asr	r23
 440:	67 95       	ror	r22
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <DIO_read+0x3a>
 446:	cb 01       	movw	r24, r22
 448:	81 70       	andi	r24, 0x01	; 1
 44a:	fa 01       	movw	r30, r20
 44c:	80 83       	st	Z, r24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 44e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
		*value = GET_BIT(PINA,pinNumber);
		break;
		case DIO_PORTB:
		*value = GET_BIT(PINB,pinNumber);
		break;
 450:	08 95       	ret
		case DIO_PORTC:
		*value = GET_BIT(PINC,pinNumber);
 452:	23 b3       	in	r18, 0x13	; 19
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_read+0x5a>
 45a:	75 95       	asr	r23
 45c:	67 95       	ror	r22
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_read+0x56>
 462:	cb 01       	movw	r24, r22
 464:	81 70       	andi	r24, 0x01	; 1
 466:	fa 01       	movw	r30, r20
 468:	80 83       	st	Z, r24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 46a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
		*value = GET_BIT(PINB,pinNumber);
		break;
		case DIO_PORTC:
		*value = GET_BIT(PINC,pinNumber);
		break;
 46c:	08 95       	ret
		case DIO_PORTD:
		*value = GET_BIT(PIND,pinNumber);
 46e:	20 b3       	in	r18, 0x10	; 16
 470:	30 e0       	ldi	r19, 0x00	; 0
 472:	b9 01       	movw	r22, r18
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_read+0x76>
 476:	75 95       	asr	r23
 478:	67 95       	ror	r22
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_read+0x72>
 47e:	cb 01       	movw	r24, r22
 480:	81 70       	andi	r24, 0x01	; 1
 482:	fa 01       	movw	r30, r20
 484:	80 83       	st	Z, r24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
		*value = GET_BIT(PINC,pinNumber);
		break;
		case DIO_PORTD:
		*value = GET_BIT(PIND,pinNumber);
		break;
 488:	08 95       	ret
ARGS        : take PIN Number and PORT Number and pointer to the variable
return      : return DIO_OK if the PIN value stored correctly , DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_read(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber, uint8_t * value){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	08 95       	ret
		break;
		case DIO_PORTD:
		*value = GET_BIT(PIND,pinNumber);
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 48e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return DIO_OK;
}
 490:	08 95       	ret

00000492 <DIO_init_TEST>:

void DIO_init_TEST(void)
{
	uint8_t returnValue;
	// THIS WILL RETURN DIO_OKAY  HAPPYCASE
	returnValue = DIO_init(DIO_PIN7,DIO_PORTD,OUTPUT);
 492:	41 e0       	ldi	r20, 0x01	; 1
 494:	63 e0       	ldi	r22, 0x03	; 3
 496:	87 e0       	ldi	r24, 0x07	; 7
 498:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
	if(!returnValue)DIO_write(DIO_PIN7,DIO_PORTD,HIGH);
 49c:	81 11       	cpse	r24, r1
 49e:	05 c0       	rjmp	.+10     	; 0x4aa <DIO_init_TEST+0x18>
 4a0:	41 e0       	ldi	r20, 0x01	; 1
 4a2:	63 e0       	ldi	r22, 0x03	; 3
 4a4:	87 e0       	ldi	r24, 0x07	; 7
 4a6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_write>
	// THIS WILL RETURN DIO_NOT_OKAY WORST CASE
	returnValue = DIO_init(DIO_PIN6,DIO_PORTD,6);
 4aa:	46 e0       	ldi	r20, 0x06	; 6
 4ac:	63 e0       	ldi	r22, 0x03	; 3
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	0e 94 c4 00 	call	0x188	; 0x188 <DIO_init>
	if(!returnValue)DIO_write(DIO_PIN6,DIO_PORTD,HIGH);
 4b4:	81 11       	cpse	r24, r1
 4b6:	05 c0       	rjmp	.+10     	; 0x4c2 <DIO_init_TEST+0x30>
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	63 e0       	ldi	r22, 0x03	; 3
 4bc:	86 e0       	ldi	r24, 0x06	; 6
 4be:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_write>
 4c2:	08 95       	ret

000004c4 <__tablejump2__>:
 4c4:	ee 0f       	add	r30, r30
 4c6:	ff 1f       	adc	r31, r31
 4c8:	05 90       	lpm	r0, Z+
 4ca:	f4 91       	lpm	r31, Z
 4cc:	e0 2d       	mov	r30, r0
 4ce:	09 94       	ijmp

000004d0 <_exit>:
 4d0:	f8 94       	cli

000004d2 <__stop_program>:
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__stop_program>
