
ESL1_03_LedSequenceV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000658  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000006cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  000006cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001113  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088d  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac1  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000278  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061e  00000000  00000000  00002f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d16  00000000  00000000  00003542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_1>
   8:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_2>
   c:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__vector_3>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	7a 00       	.word	0x007a	; ????
  56:	7f 00       	.word	0x007f	; ????
  58:	84 00       	.word	0x0084	; ????
  5a:	89 00       	.word	0x0089	; ????
  5c:	8e 00       	.word	0x008e	; ????
  5e:	93 00       	.word	0x0093	; ????
  60:	98 00       	.word	0x0098	; ????
  62:	9d 00       	.word	0x009d	; ????

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a7 36       	cpi	r26, 0x67	; 103
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  84:	0c 94 2a 03 	jmp	0x654	; 0x654 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <pressed>:
	
}

void pressed()
{
	flag++;
  8c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  90:	8f 5f       	subi	r24, 0xFF	; 255
  92:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	if(flag == 9)flag=1;
  96:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  9a:	89 30       	cpi	r24, 0x09	; 9
  9c:	19 f4       	brne	.+6      	; 0xa4 <pressed+0x18>
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	08 95       	ret

000000a6 <app_init>:

void pressed(void);
volatile uint8_t flag = 0 ;
void app_init()
{
	LED_init(DIO_PIN0,DIO_PORTA);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	0e 94 a2 00 	call	0x144	; 0x144 <LED_init>
	LED_init(DIO_PIN1,DIO_PORTA);
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	0e 94 a2 00 	call	0x144	; 0x144 <LED_init>
	LED_init(DIO_PIN2,DIO_PORTA);
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	0e 94 a2 00 	call	0x144	; 0x144 <LED_init>
	LED_init(DIO_PIN3,DIO_PORTA);
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 a2 00 	call	0x144	; 0x144 <LED_init>
	
	EXTINT_init(EXTINT1,RISING_EDGE);
  c6:	62 e0       	ldi	r22, 0x02	; 2
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	0e 94 09 02 	call	0x412	; 0x412 <EXTINT_init>
	EXTINT_CallBack(EXTINT1,pressed);
  ce:	66 e4       	ldi	r22, 0x46	; 70
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 90 02 	call	0x520	; 0x520 <EXTINT_CallBack>
  d8:	08 95       	ret

000000da <app_start>:
}
void app_start()
{
	while(1)
	{
		switch(flag)
  da:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	8e 2f       	mov	r24, r30
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	e8 30       	cpi	r30, 0x08	; 8
  e8:	f1 05       	cpc	r31, r1
  ea:	b8 f7       	brcc	.-18     	; 0xda <app_start>
  ec:	e6 5d       	subi	r30, 0xD6	; 214
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	0c 94 24 03 	jmp	0x648	; 0x648 <__tablejump2__>
		{
			case 1:
				LED_on(DIO_PIN0,DIO_PORTA);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 a8 00 	call	0x150	; 0x150 <LED_on>
				break;
  fc:	ee cf       	rjmp	.-36     	; 0xda <app_start>
			case 2:
				LED_on(DIO_PIN1,DIO_PORTA);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	0e 94 a8 00 	call	0x150	; 0x150 <LED_on>
				break;
 106:	e9 cf       	rjmp	.-46     	; 0xda <app_start>
			case 3:
				LED_on(DIO_PIN2,DIO_PORTA);
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	0e 94 a8 00 	call	0x150	; 0x150 <LED_on>
				break;
 110:	e4 cf       	rjmp	.-56     	; 0xda <app_start>
			case 4:
				LED_on(DIO_PIN3,DIO_PORTA);
 112:	60 e0       	ldi	r22, 0x00	; 0
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	0e 94 a8 00 	call	0x150	; 0x150 <LED_on>
				break;
 11a:	df cf       	rjmp	.-66     	; 0xda <app_start>
			case 5:
			    LED_off(DIO_PIN0,DIO_PORTA);
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_off>
				break;
 124:	da cf       	rjmp	.-76     	; 0xda <app_start>
			case 6:
				LED_off(DIO_PIN1,DIO_PORTA);
 126:	60 e0       	ldi	r22, 0x00	; 0
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_off>
				break;
 12e:	d5 cf       	rjmp	.-86     	; 0xda <app_start>
			case 7:
				LED_off(DIO_PIN2,DIO_PORTA);
 130:	60 e0       	ldi	r22, 0x00	; 0
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_off>
				break;
 138:	d0 cf       	rjmp	.-96     	; 0xda <app_start>
			case 8:
				LED_off(DIO_PIN3,DIO_PORTA);
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	83 e0       	ldi	r24, 0x03	; 3
 13e:	0e 94 ae 00 	call	0x15c	; 0x15c <LED_off>
				break;			
 142:	cb cf       	rjmp	.-106    	; 0xda <app_start>

00000144 <LED_init>:
#include "led.h"

// initialize LED as output 
EN_LED_Error_t LED_init(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber)
{
	if(!DIO_init(pinNumber,portNumber,OUTPUT))return LED_OK;
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	0e 94 bb 00 	call	0x176	; 0x176 <DIO_init>
 14a:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 14c:	81 e0       	ldi	r24, 0x01	; 1
}
 14e:	08 95       	ret

00000150 <LED_on>:
EN_LED_Error_t LED_on(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber)
{
	if(!DIO_write(pinNumber,portNumber,HIGH))return LED_OK;
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_write>
 156:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 158:	81 e0       	ldi	r24, 0x01	; 1
}
 15a:	08 95       	ret

0000015c <LED_off>:
EN_LED_Error_t LED_off(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(!DIO_write(pinNumber,portNumber,LOW))return LED_OK;
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <DIO_write>
 162:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 164:	81 e0       	ldi	r24, 0x01	; 1
}
 166:	08 95       	ret

00000168 <main>:
#include "App/app.h"


int main(void)
{
	app_init();
 168:	0e 94 53 00 	call	0xa6	; 0xa6 <app_init>
	app_start();
 16c:	0e 94 6d 00 	call	0xda	; 0xda <app_start>
}
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <DIO_init>:
ARGS        : take PIN Number and PORT Number and Direction (INPUT,OUTPUT)
return      : return DIO_OK if the PIN initializes correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_init(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber,EN_DIO_DIRECTION direction){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 176:	88 30       	cpi	r24, 0x08	; 8
 178:	08 f0       	brcs	.+2      	; 0x17c <DIO_init+0x6>
 17a:	90 c0       	rjmp	.+288    	; 0x29c <DIO_init+0x126>
	switch(portNumber){
 17c:	61 30       	cpi	r22, 0x01	; 1
 17e:	51 f1       	breq	.+84     	; 0x1d4 <DIO_init+0x5e>
 180:	38 f0       	brcs	.+14     	; 0x190 <DIO_init+0x1a>
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	09 f4       	brne	.+2      	; 0x188 <DIO_init+0x12>
 186:	48 c0       	rjmp	.+144    	; 0x218 <DIO_init+0xa2>
 188:	63 30       	cpi	r22, 0x03	; 3
 18a:	09 f4       	brne	.+2      	; 0x18e <DIO_init+0x18>
 18c:	66 c0       	rjmp	.+204    	; 0x25a <DIO_init+0xe4>
 18e:	88 c0       	rjmp	.+272    	; 0x2a0 <DIO_init+0x12a>
		case DIO_PORTA:
		  if(direction == INPUT)CLEAR_BIT(DDRA,pinNumber);
 190:	41 11       	cpse	r20, r1
 192:	0f c0       	rjmp	.+30     	; 0x1b2 <DIO_init+0x3c>
 194:	4a b3       	in	r20, 0x1a	; 26
 196:	21 e0       	ldi	r18, 0x01	; 1
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	b9 01       	movw	r22, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_init+0x2c>
 19e:	66 0f       	add	r22, r22
 1a0:	77 1f       	adc	r23, r23
 1a2:	8a 95       	dec	r24
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_init+0x28>
 1a6:	cb 01       	movw	r24, r22
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	8a bb       	out	0x1a, r24	; 26
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		  if(direction == INPUT)CLEAR_BIT(DDRA,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRA,pinNumber);
 1b2:	41 30       	cpi	r20, 0x01	; 1
 1b4:	09 f0       	breq	.+2      	; 0x1b8 <DIO_init+0x42>
 1b6:	76 c0       	rjmp	.+236    	; 0x2a4 <DIO_init+0x12e>
 1b8:	4a b3       	in	r20, 0x1a	; 26
 1ba:	21 e0       	ldi	r18, 0x01	; 1
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	b9 01       	movw	r22, r18
 1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <DIO_init+0x50>
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	8a 95       	dec	r24
 1c8:	e2 f7       	brpl	.-8      	; 0x1c2 <DIO_init+0x4c>
 1ca:	cb 01       	movw	r24, r22
 1cc:	84 2b       	or	r24, r20
 1ce:	8a bb       	out	0x1a, r24	; 26
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	08 95       	ret
		  if(direction == INPUT)CLEAR_BIT(DDRA,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRA,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTB:
		  if(direction == INPUT)CLEAR_BIT(DDRB,pinNumber);
 1d4:	41 11       	cpse	r20, r1
 1d6:	0f c0       	rjmp	.+30     	; 0x1f6 <DIO_init+0x80>
 1d8:	47 b3       	in	r20, 0x17	; 23
 1da:	21 e0       	ldi	r18, 0x01	; 1
 1dc:	30 e0       	ldi	r19, 0x00	; 0
 1de:	b9 01       	movw	r22, r18
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <DIO_init+0x70>
 1e2:	66 0f       	add	r22, r22
 1e4:	77 1f       	adc	r23, r23
 1e6:	8a 95       	dec	r24
 1e8:	e2 f7       	brpl	.-8      	; 0x1e2 <DIO_init+0x6c>
 1ea:	cb 01       	movw	r24, r22
 1ec:	80 95       	com	r24
 1ee:	84 23       	and	r24, r20
 1f0:	87 bb       	out	0x17, r24	; 23
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret
		  else if (direction == OUTPUT) SET_BIT(DDRA,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTB:
		  if(direction == INPUT)CLEAR_BIT(DDRB,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRB,pinNumber);
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	09 f0       	breq	.+2      	; 0x1fc <DIO_init+0x86>
 1fa:	56 c0       	rjmp	.+172    	; 0x2a8 <DIO_init+0x132>
 1fc:	47 b3       	in	r20, 0x17	; 23
 1fe:	21 e0       	ldi	r18, 0x01	; 1
 200:	30 e0       	ldi	r19, 0x00	; 0
 202:	b9 01       	movw	r22, r18
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_init+0x94>
 206:	66 0f       	add	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	8a 95       	dec	r24
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_init+0x90>
 20e:	cb 01       	movw	r24, r22
 210:	84 2b       	or	r24, r20
 212:	87 bb       	out	0x17, r24	; 23
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	08 95       	ret
		  if(direction == INPUT)CLEAR_BIT(DDRB,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRB,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTC:
		  if(direction == INPUT)CLEAR_BIT(DDRC,pinNumber);
 218:	41 11       	cpse	r20, r1
 21a:	0f c0       	rjmp	.+30     	; 0x23a <DIO_init+0xc4>
 21c:	44 b3       	in	r20, 0x14	; 20
 21e:	21 e0       	ldi	r18, 0x01	; 1
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	b9 01       	movw	r22, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_init+0xb4>
 226:	66 0f       	add	r22, r22
 228:	77 1f       	adc	r23, r23
 22a:	8a 95       	dec	r24
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_init+0xb0>
 22e:	cb 01       	movw	r24, r22
 230:	80 95       	com	r24
 232:	84 23       	and	r24, r20
 234:	84 bb       	out	0x14, r24	; 20
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	08 95       	ret
		  else if (direction == OUTPUT) SET_BIT(DDRB,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTC:
		  if(direction == INPUT)CLEAR_BIT(DDRC,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRC,pinNumber);
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	b9 f5       	brne	.+110    	; 0x2ac <DIO_init+0x136>
 23e:	44 b3       	in	r20, 0x14	; 20
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_init+0xd6>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_init+0xd2>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	84 bb       	out	0x14, r24	; 20
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	08 95       	ret
		  if(direction == INPUT)CLEAR_BIT(DDRC,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRC,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTD:
		  if(direction == INPUT)CLEAR_BIT(DDRD,pinNumber);
 25a:	41 11       	cpse	r20, r1
 25c:	0f c0       	rjmp	.+30     	; 0x27c <DIO_init+0x106>
 25e:	41 b3       	in	r20, 0x11	; 17
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	b9 01       	movw	r22, r18
 266:	02 c0       	rjmp	.+4      	; 0x26c <DIO_init+0xf6>
 268:	66 0f       	add	r22, r22
 26a:	77 1f       	adc	r23, r23
 26c:	8a 95       	dec	r24
 26e:	e2 f7       	brpl	.-8      	; 0x268 <DIO_init+0xf2>
 270:	cb 01       	movw	r24, r22
 272:	80 95       	com	r24
 274:	84 23       	and	r24, r20
 276:	81 bb       	out	0x11, r24	; 17
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	08 95       	ret
		  else if (direction == OUTPUT) SET_BIT(DDRC,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  case DIO_PORTD:
		  if(direction == INPUT)CLEAR_BIT(DDRD,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRD,pinNumber);
 27c:	41 30       	cpi	r20, 0x01	; 1
 27e:	c1 f4       	brne	.+48     	; 0x2b0 <DIO_init+0x13a>
 280:	41 b3       	in	r20, 0x11	; 17
 282:	21 e0       	ldi	r18, 0x01	; 1
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	b9 01       	movw	r22, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_init+0x118>
 28a:	66 0f       	add	r22, r22
 28c:	77 1f       	adc	r23, r23
 28e:	8a 95       	dec	r24
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_init+0x114>
 292:	cb 01       	movw	r24, r22
 294:	84 2b       	or	r24, r20
 296:	81 bb       	out	0x11, r24	; 17
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	08 95       	ret
ARGS        : take PIN Number and PORT Number and Direction (INPUT,OUTPUT)
return      : return DIO_OK if the PIN initializes correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_init(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber,EN_DIO_DIRECTION direction){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	08 95       	ret
		  if(direction == INPUT)CLEAR_BIT(DDRD,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRD,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
		  break;
		  default: 
		  return DIO_NOT_OK; //handle port number error
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	08 95       	ret
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		  if(direction == INPUT)CLEAR_BIT(DDRA,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRA,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	08 95       	ret
		  break;
		  case DIO_PORTB:
		  if(direction == INPUT)CLEAR_BIT(DDRB,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRB,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
		  break;
		  case DIO_PORTC:
		  if(direction == INPUT)CLEAR_BIT(DDRC,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRC,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
		  break;
		  case DIO_PORTD:
		  if(direction == INPUT)CLEAR_BIT(DDRD,pinNumber);
		  else if (direction == OUTPUT) SET_BIT(DDRD,pinNumber);
		  else return DIO_NOT_OK ; // handle direction error
 2b0:	81 e0       	ldi	r24, 0x01	; 1
		  default: 
		  return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK; 
}
 2b2:	08 95       	ret

000002b4 <DIO_write>:
ARGS        : take PIN Number and PORT Number and level (LOW,HIGH)
return      : return DIO_OK if the PIN level sets correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_write(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber,EN_DIO_LEVEL level){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 2b4:	88 30       	cpi	r24, 0x08	; 8
 2b6:	08 f0       	brcs	.+2      	; 0x2ba <DIO_write+0x6>
 2b8:	90 c0       	rjmp	.+288    	; 0x3da <DIO_write+0x126>
	switch(portNumber){
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	51 f1       	breq	.+84     	; 0x312 <DIO_write+0x5e>
 2be:	38 f0       	brcs	.+14     	; 0x2ce <DIO_write+0x1a>
 2c0:	62 30       	cpi	r22, 0x02	; 2
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <DIO_write+0x12>
 2c4:	48 c0       	rjmp	.+144    	; 0x356 <DIO_write+0xa2>
 2c6:	63 30       	cpi	r22, 0x03	; 3
 2c8:	09 f4       	brne	.+2      	; 0x2cc <DIO_write+0x18>
 2ca:	66 c0       	rjmp	.+204    	; 0x398 <DIO_write+0xe4>
 2cc:	88 c0       	rjmp	.+272    	; 0x3de <DIO_write+0x12a>
		case DIO_PORTA:
		if(level == LOW)CLEAR_BIT(PORTA,pinNumber);
 2ce:	41 11       	cpse	r20, r1
 2d0:	0f c0       	rjmp	.+30     	; 0x2f0 <DIO_write+0x3c>
 2d2:	4b b3       	in	r20, 0x1b	; 27
 2d4:	21 e0       	ldi	r18, 0x01	; 1
 2d6:	30 e0       	ldi	r19, 0x00	; 0
 2d8:	b9 01       	movw	r22, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_write+0x2c>
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	8a 95       	dec	r24
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_write+0x28>
 2e4:	cb 01       	movw	r24, r22
 2e6:	80 95       	com	r24
 2e8:	84 23       	and	r24, r20
 2ea:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	08 95       	ret
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		if(level == LOW)CLEAR_BIT(PORTA,pinNumber);
		else if (level == HIGH) SET_BIT(PORTA,pinNumber);
 2f0:	41 30       	cpi	r20, 0x01	; 1
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <DIO_write+0x42>
 2f4:	76 c0       	rjmp	.+236    	; 0x3e2 <DIO_write+0x12e>
 2f6:	4b b3       	in	r20, 0x1b	; 27
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_write+0x50>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_write+0x4c>
 308:	cb 01       	movw	r24, r22
 30a:	84 2b       	or	r24, r20
 30c:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	08 95       	ret
		if(level == LOW)CLEAR_BIT(PORTA,pinNumber);
		else if (level == HIGH) SET_BIT(PORTA,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTB:
		if(level == LOW)CLEAR_BIT(PORTB,pinNumber);
 312:	41 11       	cpse	r20, r1
 314:	0f c0       	rjmp	.+30     	; 0x334 <DIO_write+0x80>
 316:	48 b3       	in	r20, 0x18	; 24
 318:	21 e0       	ldi	r18, 0x01	; 1
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	b9 01       	movw	r22, r18
 31e:	02 c0       	rjmp	.+4      	; 0x324 <DIO_write+0x70>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	8a 95       	dec	r24
 326:	e2 f7       	brpl	.-8      	; 0x320 <DIO_write+0x6c>
 328:	cb 01       	movw	r24, r22
 32a:	80 95       	com	r24
 32c:	84 23       	and	r24, r20
 32e:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret
		else if (level == HIGH) SET_BIT(PORTA,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTB:
		if(level == LOW)CLEAR_BIT(PORTB,pinNumber);
		else if (level == HIGH) SET_BIT(PORTB,pinNumber);
 334:	41 30       	cpi	r20, 0x01	; 1
 336:	09 f0       	breq	.+2      	; 0x33a <DIO_write+0x86>
 338:	56 c0       	rjmp	.+172    	; 0x3e6 <DIO_write+0x132>
 33a:	48 b3       	in	r20, 0x18	; 24
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <DIO_write+0x94>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	8a 95       	dec	r24
 34a:	e2 f7       	brpl	.-8      	; 0x344 <DIO_write+0x90>
 34c:	cb 01       	movw	r24, r22
 34e:	84 2b       	or	r24, r20
 350:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	08 95       	ret
		if(level == LOW)CLEAR_BIT(PORTB,pinNumber);
		else if (level == HIGH) SET_BIT(PORTB,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTC:
		if(level == LOW)CLEAR_BIT(PORTC,pinNumber);
 356:	41 11       	cpse	r20, r1
 358:	0f c0       	rjmp	.+30     	; 0x378 <DIO_write+0xc4>
 35a:	45 b3       	in	r20, 0x15	; 21
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_write+0xb4>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_write+0xb0>
 36c:	cb 01       	movw	r24, r22
 36e:	80 95       	com	r24
 370:	84 23       	and	r24, r20
 372:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret
		else if (level == HIGH) SET_BIT(PORTB,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTC:
		if(level == LOW)CLEAR_BIT(PORTC,pinNumber);
		else if (level == HIGH) SET_BIT(PORTC,pinNumber);
 378:	41 30       	cpi	r20, 0x01	; 1
 37a:	b9 f5       	brne	.+110    	; 0x3ea <DIO_write+0x136>
 37c:	45 b3       	in	r20, 0x15	; 21
 37e:	21 e0       	ldi	r18, 0x01	; 1
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	b9 01       	movw	r22, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <DIO_write+0xd6>
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	8a 95       	dec	r24
 38c:	e2 f7       	brpl	.-8      	; 0x386 <DIO_write+0xd2>
 38e:	cb 01       	movw	r24, r22
 390:	84 2b       	or	r24, r20
 392:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
		if(level == LOW)CLEAR_BIT(PORTC,pinNumber);
		else if (level == HIGH) SET_BIT(PORTC,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTD:
		if(level == LOW)CLEAR_BIT(PORTD,pinNumber);
 398:	41 11       	cpse	r20, r1
 39a:	0f c0       	rjmp	.+30     	; 0x3ba <DIO_write+0x106>
 39c:	42 b3       	in	r20, 0x12	; 18
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_write+0xf6>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_write+0xf2>
 3ae:	cb 01       	movw	r24, r22
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	08 95       	ret
		else if (level == HIGH) SET_BIT(PORTC,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		case DIO_PORTD:
		if(level == LOW)CLEAR_BIT(PORTD,pinNumber);
		else if (level == HIGH) SET_BIT(PORTD,pinNumber);
 3ba:	41 30       	cpi	r20, 0x01	; 1
 3bc:	c1 f4       	brne	.+48     	; 0x3ee <DIO_write+0x13a>
 3be:	42 b3       	in	r20, 0x12	; 18
 3c0:	21 e0       	ldi	r18, 0x01	; 1
 3c2:	30 e0       	ldi	r19, 0x00	; 0
 3c4:	b9 01       	movw	r22, r18
 3c6:	02 c0       	rjmp	.+4      	; 0x3cc <DIO_write+0x118>
 3c8:	66 0f       	add	r22, r22
 3ca:	77 1f       	adc	r23, r23
 3cc:	8a 95       	dec	r24
 3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <DIO_write+0x114>
 3d0:	cb 01       	movw	r24, r22
 3d2:	84 2b       	or	r24, r20
 3d4:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
ARGS        : take PIN Number and PORT Number and level (LOW,HIGH)
return      : return DIO_OK if the PIN level sets correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_write(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber,EN_DIO_LEVEL level){
	
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	08 95       	ret
		if(level == LOW)CLEAR_BIT(PORTD,pinNumber);
		else if (level == HIGH) SET_BIT(PORTD,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	08 95       	ret
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		if(level == LOW)CLEAR_BIT(PORTA,pinNumber);
		else if (level == HIGH) SET_BIT(PORTA,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	08 95       	ret
		break;
		case DIO_PORTB:
		if(level == LOW)CLEAR_BIT(PORTB,pinNumber);
		else if (level == HIGH) SET_BIT(PORTB,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	08 95       	ret
		break;
		case DIO_PORTC:
		if(level == LOW)CLEAR_BIT(PORTC,pinNumber);
		else if (level == HIGH) SET_BIT(PORTC,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	08 95       	ret
		break;
		case DIO_PORTD:
		if(level == LOW)CLEAR_BIT(PORTD,pinNumber);
		else if (level == HIGH) SET_BIT(PORTD,pinNumber);
		else return DIO_NOT_OK ; // handle direction error
 3ee:	81 e0       	ldi	r24, 0x01	; 1
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 3f0:	08 95       	ret

000003f2 <SET_GLOBAL_INTERRUPT>:
void (*ptrINT2)(void) = 0;

EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	29 f4       	brne	.+10     	; 0x400 <__EEPROM_REGION_LENGTH__>
	SET_BIT(SREG,7);
 3f6:	8f b7       	in	r24, 0x3f	; 63
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	8f bf       	out	0x3f, r24	; 63
    else if (state == DISABLE)
	CLEAR_BIT(SREG,7);
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 3fc:	80 e0       	ldi	r24, 0x00	; 0
 3fe:	08 95       	ret
EN_EXTINT_ERROR SET_GLOBAL_INTERRUPT(EN_GLOBAL_INT state)
{
	
	if(state == ENABLE)
	SET_BIT(SREG,7);
    else if (state == DISABLE)
 400:	81 11       	cpse	r24, r1
 402:	05 c0       	rjmp	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
	CLEAR_BIT(SREG,7);
 404:	8f b7       	in	r24, 0x3f	; 63
 406:	8f 77       	andi	r24, 0x7F	; 127
 408:	8f bf       	out	0x3f, r24	; 63
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	08 95       	ret
	
	if(state == ENABLE)
	SET_BIT(SREG,7);
    else if (state == DISABLE)
	CLEAR_BIT(SREG,7);
	else return EXTINT_NOT_OK;
 40e:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
 410:	08 95       	ret

00000412 <EXTINT_init>:

EN_EXTINT_ERROR EXTINT_init(EN_EXINT_NUMBER INTx ,EN_Sence_Control INTxSense)
{
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	c8 2f       	mov	r28, r24
 418:	d6 2f       	mov	r29, r22
	
	SET_GLOBAL_INTERRUPT(ENABLE); // SET GLOBAL INTERRUPT
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SET_GLOBAL_INTERRUPT>
	switch(INTx)
 420:	c1 30       	cpi	r28, 0x01	; 1
 422:	99 f1       	breq	.+102    	; 0x48a <EXTINT_init+0x78>
 424:	20 f0       	brcs	.+8      	; 0x42e <EXTINT_init+0x1c>
 426:	c2 30       	cpi	r28, 0x02	; 2
 428:	09 f4       	brne	.+2      	; 0x42c <EXTINT_init+0x1a>
 42a:	5d c0       	rjmp	.+186    	; 0x4e6 <EXTINT_init+0xd4>
 42c:	72 c0       	rjmp	.+228    	; 0x512 <EXTINT_init+0x100>
	{
		case EXTINT0:
		  if(INTxSense == LOW_LEVEL)
 42e:	d1 11       	cpse	r29, r1
 430:	07 c0       	rjmp	.+14     	; 0x440 <EXTINT_init+0x2e>
		  {
			  CLEAR_BIT(MCUCR,0);
 432:	85 b7       	in	r24, 0x35	; 53
 434:	8e 7f       	andi	r24, 0xFE	; 254
 436:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,1);
 438:	85 b7       	in	r24, 0x35	; 53
 43a:	8d 7f       	andi	r24, 0xFD	; 253
 43c:	85 bf       	out	0x35, r24	; 53
 43e:	20 c0       	rjmp	.+64     	; 0x480 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == FALLING_EDGE)
 440:	d1 30       	cpi	r29, 0x01	; 1
 442:	39 f4       	brne	.+14     	; 0x452 <EXTINT_init+0x40>
		  {
			  CLEAR_BIT(MCUCR,0);
 444:	85 b7       	in	r24, 0x35	; 53
 446:	8e 7f       	andi	r24, 0xFE	; 254
 448:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,1);
 44a:	85 b7       	in	r24, 0x35	; 53
 44c:	82 60       	ori	r24, 0x02	; 2
 44e:	85 bf       	out	0x35, r24	; 53
 450:	17 c0       	rjmp	.+46     	; 0x480 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == RISING_EDGE)
 452:	d2 30       	cpi	r29, 0x02	; 2
 454:	39 f4       	brne	.+14     	; 0x464 <EXTINT_init+0x52>
		  {
			  SET_BIT(MCUCR,0);
 456:	85 b7       	in	r24, 0x35	; 53
 458:	81 60       	ori	r24, 0x01	; 1
 45a:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,1);
 45c:	85 b7       	in	r24, 0x35	; 53
 45e:	82 60       	ori	r24, 0x02	; 2
 460:	85 bf       	out	0x35, r24	; 53
 462:	0e c0       	rjmp	.+28     	; 0x480 <EXTINT_init+0x6e>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 464:	d3 30       	cpi	r29, 0x03	; 3
 466:	39 f4       	brne	.+14     	; 0x476 <EXTINT_init+0x64>
		  {
			  SET_BIT(MCUCR,0);
 468:	85 b7       	in	r24, 0x35	; 53
 46a:	81 60       	ori	r24, 0x01	; 1
 46c:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,1);
 46e:	85 b7       	in	r24, 0x35	; 53
 470:	8d 7f       	andi	r24, 0xFD	; 253
 472:	85 bf       	out	0x35, r24	; 53
 474:	05 c0       	rjmp	.+10     	; 0x480 <EXTINT_init+0x6e>
		  }
		  else   // handle sense option error
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SET_GLOBAL_INTERRUPT>
			   return EXTINT_NOT_OK;
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	4d c0       	rjmp	.+154    	; 0x51a <EXTINT_init+0x108>
		  }	   
		  SET_BIT(GICR,6); //Enable External INT0  (PIE)
 480:	8b b7       	in	r24, 0x3b	; 59
 482:	80 64       	ori	r24, 0x40	; 64
 484:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 486:	80 e0       	ldi	r24, 0x00	; 0
		  {
			  SET_GLOBAL_INTERRUPT(DISABLE);
			   return EXTINT_NOT_OK;
		  }	   
		  SET_BIT(GICR,6); //Enable External INT0  (PIE)
		  break;
 488:	48 c0       	rjmp	.+144    	; 0x51a <EXTINT_init+0x108>
		case EXTINT1:
		  if(INTxSense == LOW_LEVEL)
 48a:	d1 11       	cpse	r29, r1
 48c:	07 c0       	rjmp	.+14     	; 0x49c <EXTINT_init+0x8a>
		  {
			  CLEAR_BIT(MCUCR,2);
 48e:	85 b7       	in	r24, 0x35	; 53
 490:	8b 7f       	andi	r24, 0xFB	; 251
 492:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,3);
 494:	85 b7       	in	r24, 0x35	; 53
 496:	87 7f       	andi	r24, 0xF7	; 247
 498:	85 bf       	out	0x35, r24	; 53
 49a:	20 c0       	rjmp	.+64     	; 0x4dc <EXTINT_init+0xca>
		  }
		  else if(INTxSense == FALLING_EDGE)
 49c:	d1 30       	cpi	r29, 0x01	; 1
 49e:	39 f4       	brne	.+14     	; 0x4ae <EXTINT_init+0x9c>
		  {
			  CLEAR_BIT(MCUCR,2);
 4a0:	85 b7       	in	r24, 0x35	; 53
 4a2:	8b 7f       	andi	r24, 0xFB	; 251
 4a4:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,3);
 4a6:	85 b7       	in	r24, 0x35	; 53
 4a8:	88 60       	ori	r24, 0x08	; 8
 4aa:	85 bf       	out	0x35, r24	; 53
 4ac:	17 c0       	rjmp	.+46     	; 0x4dc <EXTINT_init+0xca>
		  }
		  else if(INTxSense == RISING_EDGE)
 4ae:	d2 30       	cpi	r29, 0x02	; 2
 4b0:	39 f4       	brne	.+14     	; 0x4c0 <EXTINT_init+0xae>
		  {
			  SET_BIT(MCUCR,2);
 4b2:	85 b7       	in	r24, 0x35	; 53
 4b4:	84 60       	ori	r24, 0x04	; 4
 4b6:	85 bf       	out	0x35, r24	; 53
			  SET_BIT(MCUCR,3);
 4b8:	85 b7       	in	r24, 0x35	; 53
 4ba:	88 60       	ori	r24, 0x08	; 8
 4bc:	85 bf       	out	0x35, r24	; 53
 4be:	0e c0       	rjmp	.+28     	; 0x4dc <EXTINT_init+0xca>
		  }
		  else if(INTxSense == ANY_LOGICAL_CHANGE)
 4c0:	d3 30       	cpi	r29, 0x03	; 3
 4c2:	39 f4       	brne	.+14     	; 0x4d2 <EXTINT_init+0xc0>
		  {
			  SET_BIT(MCUCR,2);
 4c4:	85 b7       	in	r24, 0x35	; 53
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	85 bf       	out	0x35, r24	; 53
			  CLEAR_BIT(MCUCR,3);
 4ca:	85 b7       	in	r24, 0x35	; 53
 4cc:	87 7f       	andi	r24, 0xF7	; 247
 4ce:	85 bf       	out	0x35, r24	; 53
 4d0:	05 c0       	rjmp	.+10     	; 0x4dc <EXTINT_init+0xca>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	1f c0       	rjmp	.+62     	; 0x51a <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,7); //Enable External INT1  (PIE)
 4dc:	8b b7       	in	r24, 0x3b	; 59
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 4e2:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,7); //Enable External INT1  (PIE)
		  break;
 4e4:	1a c0       	rjmp	.+52     	; 0x51a <EXTINT_init+0x108>
		case EXTINT2:
		 
		  if(INTxSense == FALLING_EDGE)
 4e6:	d1 30       	cpi	r29, 0x01	; 1
 4e8:	21 f4       	brne	.+8      	; 0x4f2 <EXTINT_init+0xe0>
		  {
			  CLEAR_BIT(MCUCSR,6);
 4ea:	84 b7       	in	r24, 0x34	; 52
 4ec:	8f 7b       	andi	r24, 0xBF	; 191
 4ee:	84 bf       	out	0x34, r24	; 52
 4f0:	0b c0       	rjmp	.+22     	; 0x508 <EXTINT_init+0xf6>
		  }
		  else if(INTxSense == RISING_EDGE)
 4f2:	d2 30       	cpi	r29, 0x02	; 2
 4f4:	21 f4       	brne	.+8      	; 0x4fe <EXTINT_init+0xec>
		  {
			  SET_BIT(MCUCSR,6);
 4f6:	84 b7       	in	r24, 0x34	; 52
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	84 bf       	out	0x34, r24	; 52
 4fc:	05 c0       	rjmp	.+10     	; 0x508 <EXTINT_init+0xf6>
		  }
		  else   // handle sense option error
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SET_GLOBAL_INTERRUPT>
		 	 return EXTINT_NOT_OK;
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	09 c0       	rjmp	.+18     	; 0x51a <EXTINT_init+0x108>
		  }
		  SET_BIT(GICR,5); //Enable External INT1  (PIE)
 508:	8b b7       	in	r24, 0x3b	; 59
 50a:	80 62       	ori	r24, 0x20	; 32
 50c:	8b bf       	out	0x3b, r24	; 59
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
		  return EXTINT_NOT_OK;
		  break;
	}
	return EXTINT_OK;
 50e:	80 e0       	ldi	r24, 0x00	; 0
		  {
		 	 SET_GLOBAL_INTERRUPT(DISABLE);
		 	 return EXTINT_NOT_OK;
		  }
		  SET_BIT(GICR,5); //Enable External INT1  (PIE)
		  break;
 510:	04 c0       	rjmp	.+8      	; 0x51a <EXTINT_init+0x108>
		default: // handle wrong Choose for EXT Interrupt Number
		  SET_GLOBAL_INTERRUPT(DISABLE);
 512:	80 e0       	ldi	r24, 0x00	; 0
 514:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <SET_GLOBAL_INTERRUPT>
		  return EXTINT_NOT_OK;
 518:	81 e0       	ldi	r24, 0x01	; 1
		  break;
	}
	return EXTINT_OK;
}
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <EXTINT_CallBack>:

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
 520:	81 11       	cpse	r24, r1
 522:	05 c0       	rjmp	.+10     	; 0x52e <EXTINT_CallBack+0xe>
 524:	70 93 66 00 	sts	0x0066, r23	; 0x800066 <ptrINT0+0x1>
 528:	60 93 65 00 	sts	0x0065, r22	; 0x800065 <ptrINT0>
 52c:	08 95       	ret
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	31 f4       	brne	.+12     	; 0x53e <EXTINT_CallBack+0x1e>
 532:	70 93 64 00 	sts	0x0064, r23	; 0x800064 <ptrINT1+0x1>
 536:	60 93 63 00 	sts	0x0063, r22	; 0x800063 <ptrINT1>
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 53a:	80 e0       	ldi	r24, 0x00	; 0
 53c:	08 95       	ret

EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
 53e:	82 30       	cpi	r24, 0x02	; 2
 540:	31 f4       	brne	.+12     	; 0x54e <EXTINT_CallBack+0x2e>
 542:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <ptrINT2+0x1>
 546:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <ptrINT2>
	else return EXTINT_NOT_OK;
	return EXTINT_OK;
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	08 95       	ret
EN_EXTINT_ERROR EXTINT_CallBack(EN_EXINT_NUMBER INTx,void(*ptrfunc)(void))
{
	if(INTx == EXTINT0 ) ptrINT0 = ptrfunc;
	else if(INTx == EXTINT1 ) ptrINT1 = ptrfunc;
	else if(INTx == EXTINT2 ) ptrINT2 = ptrfunc;
	else return EXTINT_NOT_OK;
 54e:	81 e0       	ldi	r24, 0x01	; 1
	return EXTINT_OK;
}
 550:	08 95       	ret

00000552 <__vector_1>:


ISR (INT0_vect)
{
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	3f 93       	push	r19
 560:	4f 93       	push	r20
 562:	5f 93       	push	r21
 564:	6f 93       	push	r22
 566:	7f 93       	push	r23
 568:	8f 93       	push	r24
 56a:	9f 93       	push	r25
 56c:	af 93       	push	r26
 56e:	bf 93       	push	r27
 570:	ef 93       	push	r30
 572:	ff 93       	push	r31
	if(ptrINT0) ptrINT0();
 574:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <ptrINT0>
 578:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <ptrINT0+0x1>
 57c:	30 97       	sbiw	r30, 0x00	; 0
 57e:	09 f0       	breq	.+2      	; 0x582 <__vector_1+0x30>
 580:	09 95       	icall
}
 582:	ff 91       	pop	r31
 584:	ef 91       	pop	r30
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	9f 91       	pop	r25
 58c:	8f 91       	pop	r24
 58e:	7f 91       	pop	r23
 590:	6f 91       	pop	r22
 592:	5f 91       	pop	r21
 594:	4f 91       	pop	r20
 596:	3f 91       	pop	r19
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0f be       	out	0x3f, r0	; 63
 59e:	0f 90       	pop	r0
 5a0:	1f 90       	pop	r1
 5a2:	18 95       	reti

000005a4 <__vector_2>:

ISR (INT1_vect)
{
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	3f 93       	push	r19
 5b2:	4f 93       	push	r20
 5b4:	5f 93       	push	r21
 5b6:	6f 93       	push	r22
 5b8:	7f 93       	push	r23
 5ba:	8f 93       	push	r24
 5bc:	9f 93       	push	r25
 5be:	af 93       	push	r26
 5c0:	bf 93       	push	r27
 5c2:	ef 93       	push	r30
 5c4:	ff 93       	push	r31
	if(ptrINT1) ptrINT1();
 5c6:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <ptrINT1>
 5ca:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <ptrINT1+0x1>
 5ce:	30 97       	sbiw	r30, 0x00	; 0
 5d0:	09 f0       	breq	.+2      	; 0x5d4 <__vector_2+0x30>
 5d2:	09 95       	icall
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <__vector_3>:

ISR (INT2_vect)
{
 5f6:	1f 92       	push	r1
 5f8:	0f 92       	push	r0
 5fa:	0f b6       	in	r0, 0x3f	; 63
 5fc:	0f 92       	push	r0
 5fe:	11 24       	eor	r1, r1
 600:	2f 93       	push	r18
 602:	3f 93       	push	r19
 604:	4f 93       	push	r20
 606:	5f 93       	push	r21
 608:	6f 93       	push	r22
 60a:	7f 93       	push	r23
 60c:	8f 93       	push	r24
 60e:	9f 93       	push	r25
 610:	af 93       	push	r26
 612:	bf 93       	push	r27
 614:	ef 93       	push	r30
 616:	ff 93       	push	r31
	if(ptrINT2) ptrINT2();
 618:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <ptrINT2>
 61c:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <ptrINT2+0x1>
 620:	30 97       	sbiw	r30, 0x00	; 0
 622:	09 f0       	breq	.+2      	; 0x626 <__vector_3+0x30>
 624:	09 95       	icall
 626:	ff 91       	pop	r31
 628:	ef 91       	pop	r30
 62a:	bf 91       	pop	r27
 62c:	af 91       	pop	r26
 62e:	9f 91       	pop	r25
 630:	8f 91       	pop	r24
 632:	7f 91       	pop	r23
 634:	6f 91       	pop	r22
 636:	5f 91       	pop	r21
 638:	4f 91       	pop	r20
 63a:	3f 91       	pop	r19
 63c:	2f 91       	pop	r18
 63e:	0f 90       	pop	r0
 640:	0f be       	out	0x3f, r0	; 63
 642:	0f 90       	pop	r0
 644:	1f 90       	pop	r1
 646:	18 95       	reti

00000648 <__tablejump2__>:
 648:	ee 0f       	add	r30, r30
 64a:	ff 1f       	adc	r31, r31
 64c:	05 90       	lpm	r0, Z+
 64e:	f4 91       	lpm	r31, Z
 650:	e0 2d       	mov	r30, r0
 652:	09 94       	ijmp

00000654 <_exit>:
 654:	f8 94       	cli

00000656 <__stop_program>:
 656:	ff cf       	rjmp	.-2      	; 0x656 <__stop_program>
