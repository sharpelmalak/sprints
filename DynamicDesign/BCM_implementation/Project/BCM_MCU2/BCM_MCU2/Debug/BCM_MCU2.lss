
BCM_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000027e  00800060  000007ea  0000087e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  008002de  008002de  00000afc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b2c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000210c  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ce6  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001174  00000000  00000000  00003b02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00004c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d98  00000000  00000000  00004fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143d  00000000  00000000  00005d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000717d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 38 03 	jmp	0x670	; 0x670 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <main>
  8a:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
// variable return for bcm
enu_bcm_status_t gl_enu_bcm_status_return = BCM_OKAY;
void app_init(void)
{
	
	LED_init(&gl_error_led);
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
	// init leds and check on their return
	
	if( (LED_init(&gl_str_send_complete_led) != LED_OK) || (LED_init(&gl_str_recieve_complete_led) != LED_OK))
  9a:	8a ee       	ldi	r24, 0xEA	; 234
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
  a2:	81 11       	cpse	r24, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <app_init+0x20>
  a6:	82 ef       	ldi	r24, 0xF2	; 242
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 c3 00 	call	0x186	; 0x186 <LED_init>
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <app_init+0x26>
	{
		gl_enu_app_state = BLOCKED;
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
	}
	
	// init bcm with desired channel
	gl_enu_bcm_status_return = bcm_init(&gl_str_bcm_instance_app);
  b8:	8f ed       	ldi	r24, 0xDF	; 223
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <bcm_init>
  c0:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
	if((gl_enu_bcm_status_return != BCM_OKAY) && (gl_enu_app_state != BLOCKED))
  c4:	88 23       	and	r24, r24
  c6:	39 f0       	breq	.+14     	; 0xd6 <app_init+0x44>
  c8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <gl_enu_app_state>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	19 f0       	breq	.+6      	; 0xd6 <app_init+0x44>
	{
		gl_enu_app_state = BLOCKED;
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
  d6:	08 95       	ret

000000d8 <app_start>:
	
}

void app_start(void)
{
	switch(gl_enu_app_state)
  d8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <gl_enu_app_state>
  dc:	81 30       	cpi	r24, 0x01	; 1
  de:	f9 f0       	breq	.+62     	; 0x11e <app_start+0x46>
  e0:	30 f0       	brcs	.+12     	; 0xee <app_start+0x16>
  e2:	82 30       	cpi	r24, 0x02	; 2
  e4:	29 f1       	breq	.+74     	; 0x130 <app_start+0x58>
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	09 f4       	brne	.+2      	; 0xec <app_start+0x14>
  ea:	48 c0       	rjmp	.+144    	; 0x17c <app_start+0xa4>
  ec:	08 95       	ret
	{
		case IDLE :
		{
			gl_enu_bcm_status_return = bcm_dispatcher(&gl_str_bcm_instance_app);
  ee:	8f ed       	ldi	r24, 0xDF	; 223
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <bcm_dispatcher>
  f6:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
			if(gl_enu_bcm_status_return == SEND_OPERATION_DONE)
  fa:	83 30       	cpi	r24, 0x03	; 3
  fc:	21 f4       	brne	.+8      	; 0x106 <app_start+0x2e>
			{
				gl_enu_app_state = SEND_DONE;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
 104:	08 95       	ret
			}
			else if(gl_enu_bcm_status_return == REC_OPERATION_DONE)
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	21 f4       	brne	.+8      	; 0x112 <app_start+0x3a>
			{
				gl_enu_app_state = RECEIVE_DONE;
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
 110:	08 95       	ret
			}
			
			else if(gl_enu_bcm_status_return == NULL_POINTER)
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	b9 f5       	brne	.+110    	; 0x184 <app_start+0xac>
			{
				gl_enu_app_state = BLOCKED;
 116:	83 e0       	ldi	r24, 0x03	; 3
 118:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
 11c:	08 95       	ret
			break;
		}
		
		case SEND_DONE :
		{
			LED_toggle(&gl_str_send_complete_led);
 11e:	8a ee       	ldi	r24, 0xEA	; 234
 120:	92 e0       	ldi	r25, 0x02	; 2
 122:	0e 94 cc 00 	call	0x198	; 0x198 <LED_toggle>
			gl_bcm_send_done = FALSE;
 126:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <gl_bcm_send_done>
			gl_enu_app_state =IDLE ;
 12a:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <gl_enu_app_state>
			break;
 12e:	08 95       	ret
		}
		
		case RECEIVE_DONE :
		{
		    if(!strcmp((char*)gl_rec_string_from_dest,(char*)gl_recieve_arr))
 130:	6e ee       	ldi	r22, 0xEE	; 238
 132:	72 e0       	ldi	r23, 0x02	; 2
 134:	88 e2       	ldi	r24, 0x28	; 40
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <strcmp>
 13c:	89 2b       	or	r24, r25
 13e:	d1 f4       	brne	.+52     	; 0x174 <app_start+0x9c>
		    {
			    LED_toggle(&gl_str_recieve_complete_led);
 140:	82 ef       	ldi	r24, 0xF2	; 242
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 cc 00 	call	0x198	; 0x198 <LED_toggle>
			    gl_enu_bcm_status_return = bcm_send_n(&gl_str_bcm_instance_app,gl_send_string_to_dest,strlen((char*)gl_send_string_to_dest));
 148:	e0 e6       	ldi	r30, 0x60	; 96
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	01 90       	ld	r0, Z+
 14e:	00 20       	and	r0, r0
 150:	e9 f7       	brne	.-6      	; 0x14c <app_start+0x74>
 152:	31 97       	sbiw	r30, 0x01	; 1
 154:	af 01       	movw	r20, r30
 156:	40 56       	subi	r20, 0x60	; 96
 158:	50 40       	sbci	r21, 0x00	; 0
 15a:	60 e6       	ldi	r22, 0x60	; 96
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	8f ed       	ldi	r24, 0xDF	; 223
 160:	92 e0       	ldi	r25, 0x02	; 2
 162:	0e 94 aa 03 	call	0x754	; 0x754 <bcm_send_n>
 166:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
				gl_bcm_recieve_done = FALSE;
 16a:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <gl_bcm_recieve_done>
				gl_enu_app_state =IDLE ;
 16e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <gl_enu_app_state>
 172:	08 95       	ret
		    }	
			else
			{
				gl_enu_app_state = BLOCKED;
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
 17a:	08 95       	ret
			break;
		}
		
		case BLOCKED :
		{
			LED_toggle(&gl_error_led);
 17c:	80 ef       	ldi	r24, 0xF0	; 240
 17e:	91 e0       	ldi	r25, 0x01	; 1
 180:	0e 94 cc 00 	call	0x198	; 0x198 <LED_toggle>
 184:	08 95       	ret

00000186 <LED_init>:
	else return LED_NOT_OK;
}
enu_led_error_t LED_off(str_led_config_t *str_ptr_led_config){
	if(!DIO_write(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber,LOW))return LED_OK;
	else return LED_NOT_OK;
}
 186:	41 e0       	ldi	r20, 0x01	; 1
 188:	fc 01       	movw	r30, r24
 18a:	61 81       	ldd	r22, Z+1	; 0x01
 18c:	80 81       	ld	r24, Z
 18e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <DIO_init>
 192:	81 11       	cpse	r24, r1
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret

00000198 <LED_toggle>:
enu_led_error_t LED_toggle(str_led_config_t *str_ptr_led_config){
	if(!DIO_toggle(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber))return LED_OK;
 198:	fc 01       	movw	r30, r24
 19a:	61 81       	ldd	r22, Z+1	; 0x01
 19c:	80 81       	ld	r24, Z
 19e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_toggle>
 1a2:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
}
 1a6:	08 95       	ret

000001a8 <main>:
#include "App/app.h"


int main(void)
{
    app_init();
 1a8:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 1ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <app_start>
 1b0:	fd cf       	rjmp	.-6      	; 0x1ac <main+0x4>

000001b2 <DIO_init>:
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <DIO_init+0x6>
 1b6:	90 c0       	rjmp	.+288    	; 0x2d8 <DIO_init+0x126>
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	51 f1       	breq	.+84     	; 0x210 <DIO_init+0x5e>
 1bc:	38 f0       	brcs	.+14     	; 0x1cc <DIO_init+0x1a>
 1be:	62 30       	cpi	r22, 0x02	; 2
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <DIO_init+0x12>
 1c2:	48 c0       	rjmp	.+144    	; 0x254 <DIO_init+0xa2>
 1c4:	63 30       	cpi	r22, 0x03	; 3
 1c6:	09 f4       	brne	.+2      	; 0x1ca <DIO_init+0x18>
 1c8:	66 c0       	rjmp	.+204    	; 0x296 <DIO_init+0xe4>
 1ca:	88 c0       	rjmp	.+272    	; 0x2dc <DIO_init+0x12a>
 1cc:	41 11       	cpse	r20, r1
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <DIO_init+0x3c>
 1d0:	4a b3       	in	r20, 0x1a	; 26
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	b9 01       	movw	r22, r18
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_init+0x2c>
 1da:	66 0f       	add	r22, r22
 1dc:	77 1f       	adc	r23, r23
 1de:	8a 95       	dec	r24
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_init+0x28>
 1e2:	cb 01       	movw	r24, r22
 1e4:	80 95       	com	r24
 1e6:	84 23       	and	r24, r20
 1e8:	8a bb       	out	0x1a, r24	; 26
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	09 f0       	breq	.+2      	; 0x1f4 <DIO_init+0x42>
 1f2:	76 c0       	rjmp	.+236    	; 0x2e0 <DIO_init+0x12e>
 1f4:	4a b3       	in	r20, 0x1a	; 26
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_init+0x50>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_init+0x4c>
 206:	cb 01       	movw	r24, r22
 208:	84 2b       	or	r24, r20
 20a:	8a bb       	out	0x1a, r24	; 26
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	08 95       	ret
 210:	41 11       	cpse	r20, r1
 212:	0f c0       	rjmp	.+30     	; 0x232 <DIO_init+0x80>
 214:	47 b3       	in	r20, 0x17	; 23
 216:	21 e0       	ldi	r18, 0x01	; 1
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	b9 01       	movw	r22, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_init+0x70>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	8a 95       	dec	r24
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_init+0x6c>
 226:	cb 01       	movw	r24, r22
 228:	80 95       	com	r24
 22a:	84 23       	and	r24, r20
 22c:	87 bb       	out	0x17, r24	; 23
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	08 95       	ret
 232:	41 30       	cpi	r20, 0x01	; 1
 234:	09 f0       	breq	.+2      	; 0x238 <DIO_init+0x86>
 236:	56 c0       	rjmp	.+172    	; 0x2e4 <DIO_init+0x132>
 238:	47 b3       	in	r20, 0x17	; 23
 23a:	21 e0       	ldi	r18, 0x01	; 1
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	b9 01       	movw	r22, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <DIO_init+0x94>
 242:	66 0f       	add	r22, r22
 244:	77 1f       	adc	r23, r23
 246:	8a 95       	dec	r24
 248:	e2 f7       	brpl	.-8      	; 0x242 <DIO_init+0x90>
 24a:	cb 01       	movw	r24, r22
 24c:	84 2b       	or	r24, r20
 24e:	87 bb       	out	0x17, r24	; 23
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	08 95       	ret
 254:	41 11       	cpse	r20, r1
 256:	0f c0       	rjmp	.+30     	; 0x276 <DIO_init+0xc4>
 258:	44 b3       	in	r20, 0x14	; 20
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
 25e:	b9 01       	movw	r22, r18
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_init+0xb4>
 262:	66 0f       	add	r22, r22
 264:	77 1f       	adc	r23, r23
 266:	8a 95       	dec	r24
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_init+0xb0>
 26a:	cb 01       	movw	r24, r22
 26c:	80 95       	com	r24
 26e:	84 23       	and	r24, r20
 270:	84 bb       	out	0x14, r24	; 20
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret
 276:	41 30       	cpi	r20, 0x01	; 1
 278:	b9 f5       	brne	.+110    	; 0x2e8 <DIO_init+0x136>
 27a:	44 b3       	in	r20, 0x14	; 20
 27c:	21 e0       	ldi	r18, 0x01	; 1
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	b9 01       	movw	r22, r18
 282:	02 c0       	rjmp	.+4      	; 0x288 <DIO_init+0xd6>
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	8a 95       	dec	r24
 28a:	e2 f7       	brpl	.-8      	; 0x284 <DIO_init+0xd2>
 28c:	cb 01       	movw	r24, r22
 28e:	84 2b       	or	r24, r20
 290:	84 bb       	out	0x14, r24	; 20
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	41 11       	cpse	r20, r1
 298:	0f c0       	rjmp	.+30     	; 0x2b8 <DIO_init+0x106>
 29a:	41 b3       	in	r20, 0x11	; 17
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	b9 01       	movw	r22, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_init+0xf6>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_init+0xf2>
 2ac:	cb 01       	movw	r24, r22
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	81 bb       	out	0x11, r24	; 17
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
 2b8:	41 30       	cpi	r20, 0x01	; 1
 2ba:	c1 f4       	brne	.+48     	; 0x2ec <DIO_init+0x13a>
 2bc:	41 b3       	in	r20, 0x11	; 17
 2be:	21 e0       	ldi	r18, 0x01	; 1
 2c0:	30 e0       	ldi	r19, 0x00	; 0
 2c2:	b9 01       	movw	r22, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_init+0x118>
 2c6:	66 0f       	add	r22, r22
 2c8:	77 1f       	adc	r23, r23
 2ca:	8a 95       	dec	r24
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_init+0x114>
 2ce:	cb 01       	movw	r24, r22
 2d0:	84 2b       	or	r24, r20
 2d2:	81 bb       	out	0x11, r24	; 17
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	08 95       	ret
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	08 95       	ret
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	08 95       	ret
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	08 95       	ret
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	08 95       	ret
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	08 95       	ret
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret

000002f0 <DIO_toggle>:
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 2f0:	88 30       	cpi	r24, 0x08	; 8
 2f2:	08 f0       	brcs	.+2      	; 0x2f6 <DIO_toggle+0x6>
 2f4:	40 c0       	rjmp	.+128    	; 0x376 <DIO_toggle+0x86>
	switch(portNumber){
 2f6:	61 30       	cpi	r22, 0x01	; 1
 2f8:	a1 f0       	breq	.+40     	; 0x322 <DIO_toggle+0x32>
 2fa:	28 f0       	brcs	.+10     	; 0x306 <DIO_toggle+0x16>
 2fc:	62 30       	cpi	r22, 0x02	; 2
 2fe:	f9 f0       	breq	.+62     	; 0x33e <DIO_toggle+0x4e>
 300:	63 30       	cpi	r22, 0x03	; 3
 302:	59 f1       	breq	.+86     	; 0x35a <DIO_toggle+0x6a>
 304:	3a c0       	rjmp	.+116    	; 0x37a <DIO_toggle+0x8a>
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
 306:	4b b3       	in	r20, 0x1b	; 27
 308:	21 e0       	ldi	r18, 0x01	; 1
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	b9 01       	movw	r22, r18
 30e:	02 c0       	rjmp	.+4      	; 0x314 <DIO_toggle+0x24>
 310:	66 0f       	add	r22, r22
 312:	77 1f       	adc	r23, r23
 314:	8a 95       	dec	r24
 316:	e2 f7       	brpl	.-8      	; 0x310 <DIO_toggle+0x20>
 318:	cb 01       	movw	r24, r22
 31a:	84 27       	eor	r24, r20
 31c:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 31e:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
 320:	08 95       	ret
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
 322:	48 b3       	in	r20, 0x18	; 24
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_toggle+0x40>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_toggle+0x3c>
 334:	cb 01       	movw	r24, r22
 336:	84 27       	eor	r24, r20
 338:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 33a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
 33c:	08 95       	ret
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
 33e:	45 b3       	in	r20, 0x15	; 21
 340:	21 e0       	ldi	r18, 0x01	; 1
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	b9 01       	movw	r22, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_toggle+0x5c>
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	8a 95       	dec	r24
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_toggle+0x58>
 350:	cb 01       	movw	r24, r22
 352:	84 27       	eor	r24, r20
 354:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 356:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
 358:	08 95       	ret
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
 35a:	42 b3       	in	r20, 0x12	; 18
 35c:	21 e0       	ldi	r18, 0x01	; 1
 35e:	30 e0       	ldi	r19, 0x00	; 0
 360:	b9 01       	movw	r22, r18
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_toggle+0x78>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	8a 95       	dec	r24
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_toggle+0x74>
 36c:	cb 01       	movw	r24, r22
 36e:	84 27       	eor	r24, r20
 370:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 372:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
 374:	08 95       	ret
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	08 95       	ret
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 37a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return DIO_OK;
}
 37c:	08 95       	ret

0000037e <insert_queue>:
		USART_recieve_byte(&uint8_arg_arr_bytes[uint8_loc_counter]);
		uint8_loc_counter++;
	}
	
	return STATUS_OK;
}
 37e:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 382:	9f 3f       	cpi	r25, 0xFF	; 255
 384:	11 f4       	brne	.+4      	; 0x38a <insert_queue+0xc>
 386:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 38a:	ad eb       	ldi	r26, 0xBD	; 189
 38c:	b2 e0       	ldi	r27, 0x02	; 2
 38e:	ec 91       	ld	r30, X
 390:	ef 5f       	subi	r30, 0xFF	; 255
 392:	ec 93       	st	X, r30
 394:	0e 2e       	mov	r0, r30
 396:	00 0c       	add	r0, r0
 398:	ff 0b       	sbc	r31, r31
 39a:	ec 50       	subi	r30, 0x0C	; 12
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 83       	st	Z, r24
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	08 95       	ret

000003a4 <truncate_queue>:
 3a4:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 3a8:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <str_gl_usart_tasks_queue+0xc9>
 3ac:	8e 17       	cp	r24, r30
 3ae:	14 f0       	brlt	.+4      	; 0x3b4 <truncate_queue+0x10>
 3b0:	ef 3f       	cpi	r30, 0xFF	; 255
 3b2:	39 f4       	brne	.+14     	; 0x3c2 <truncate_queue+0x1e>
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 3ba:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <str_gl_usart_tasks_queue+0xc9>
 3be:	84 e0       	ldi	r24, 0x04	; 4
 3c0:	08 95       	ret
 3c2:	0e 2e       	mov	r0, r30
 3c4:	00 0c       	add	r0, r0
 3c6:	ff 0b       	sbc	r31, r31
 3c8:	ec 50       	subi	r30, 0x0C	; 12
 3ca:	fe 4f       	sbci	r31, 0xFE	; 254
 3cc:	80 81       	ld	r24, Z
 3ce:	8c b9       	out	0x0c, r24	; 12
 3d0:	ec eb       	ldi	r30, 0xBC	; 188
 3d2:	f2 e0       	ldi	r31, 0x02	; 2
 3d4:	80 81       	ld	r24, Z
 3d6:	8f 5f       	subi	r24, 0xFF	; 255
 3d8:	80 83       	st	Z, r24
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	08 95       	ret

000003de <USART_init>:
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	e2 0f       	add	r30, r18
 3ee:	f3 1f       	adc	r31, r19
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	e2 54       	subi	r30, 0x42	; 66
 3f6:	fd 4f       	sbci	r31, 0xFD	; 253
 3f8:	90 81       	ld	r25, Z
 3fa:	89 13       	cpse	r24, r25
 3fc:	0a c0       	rjmp	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fe:	f9 01       	movw	r30, r18
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	e2 0f       	add	r30, r18
 406:	f3 1f       	adc	r31, r19
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	e2 54       	subi	r30, 0x42	; 66
 40e:	fd 4f       	sbci	r31, 0xFD	; 253
 410:	05 c0       	rjmp	.+10     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	28 f3       	brcs	.-54     	; 0x3e2 <USART_init+0x4>
 418:	e0 e0       	ldi	r30, 0x00	; 0
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	30 97       	sbiw	r30, 0x00	; 0
 41e:	09 f4       	brne	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	92 c0       	rjmp	.+292    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 422:	80 b5       	in	r24, 0x20	; 32
 424:	80 68       	ori	r24, 0x80	; 128
 426:	80 bd       	out	0x20, r24	; 32
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	99 23       	and	r25, r25
 42c:	19 f0       	breq	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	91 30       	cpi	r25, 0x01	; 1
 430:	29 f0       	breq	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	08 c0       	rjmp	.+16     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 434:	8f 7b       	andi	r24, 0xBF	; 191
 436:	80 bd       	out	0x20, r24	; 32
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	80 bd       	out	0x20, r24	; 32
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	01 c0       	rjmp	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	81 11       	cpse	r24, r1
 448:	16 c0       	rjmp	.+44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 44a:	92 81       	ldd	r25, Z+2	; 0x02
 44c:	91 30       	cpi	r25, 0x01	; 1
 44e:	49 f0       	breq	.+18     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 450:	18 f0       	brcs	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 452:	92 30       	cpi	r25, 0x02	; 2
 454:	59 f0       	breq	.+22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 456:	0e c0       	rjmp	.+28     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 458:	9a b1       	in	r25, 0x0a	; 10
 45a:	9f 7e       	andi	r25, 0xEF	; 239
 45c:	98 60       	ori	r25, 0x08	; 8
 45e:	9a b9       	out	0x0a, r25	; 10
 460:	0a c0       	rjmp	.+20     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 462:	9a b1       	in	r25, 0x0a	; 10
 464:	90 61       	ori	r25, 0x10	; 16
 466:	97 7f       	andi	r25, 0xF7	; 247
 468:	9a b9       	out	0x0a, r25	; 10
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46c:	9a b1       	in	r25, 0x0a	; 10
 46e:	98 61       	ori	r25, 0x18	; 24
 470:	9a b9       	out	0x0a, r25	; 10
 472:	01 c0       	rjmp	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	81 11       	cpse	r24, r1
 478:	14 c0       	rjmp	.+40     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 47a:	93 81       	ldd	r25, Z+3	; 0x03
 47c:	91 30       	cpi	r25, 0x01	; 1
 47e:	41 f0       	breq	.+16     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 480:	58 f0       	brcs	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 482:	92 30       	cpi	r25, 0x02	; 2
 484:	69 f4       	brne	.+26     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 486:	90 b5       	in	r25, 0x20	; 32
 488:	9f 7e       	andi	r25, 0xEF	; 239
 48a:	90 62       	ori	r25, 0x20	; 32
 48c:	90 bd       	out	0x20, r25	; 32
 48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 490:	90 b5       	in	r25, 0x20	; 32
 492:	90 63       	ori	r25, 0x30	; 48
 494:	90 bd       	out	0x20, r25	; 32
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 498:	90 b5       	in	r25, 0x20	; 32
 49a:	9f 7c       	andi	r25, 0xCF	; 207
 49c:	90 bd       	out	0x20, r25	; 32
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	81 11       	cpse	r24, r1
 4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4a6:	94 81       	ldd	r25, Z+4	; 0x04
 4a8:	99 23       	and	r25, r25
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ac:	91 30       	cpi	r25, 0x01	; 1
 4ae:	29 f0       	breq	.+10     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b2:	90 b5       	in	r25, 0x20	; 32
 4b4:	97 7f       	andi	r25, 0xF7	; 247
 4b6:	90 bd       	out	0x20, r25	; 32
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4ba:	90 b5       	in	r25, 0x20	; 32
 4bc:	98 60       	ori	r25, 0x08	; 8
 4be:	90 bd       	out	0x20, r25	; 32
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	81 11       	cpse	r24, r1
 4c6:	34 c0       	rjmp	.+104    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 4c8:	95 81       	ldd	r25, Z+5	; 0x05
 4ca:	92 30       	cpi	r25, 0x02	; 2
 4cc:	d1 f0       	breq	.+52     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4ce:	28 f4       	brcc	.+10     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d0:	99 23       	and	r25, r25
 4d2:	41 f0       	breq	.+16     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4d4:	91 30       	cpi	r25, 0x01	; 1
 4d6:	69 f0       	breq	.+26     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4d8:	2a c0       	rjmp	.+84     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	d1 f0       	breq	.+52     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 4de:	94 30       	cpi	r25, 0x04	; 4
 4e0:	f9 f0       	breq	.+62     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 4e2:	25 c0       	rjmp	.+74     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4e4:	90 b5       	in	r25, 0x20	; 32
 4e6:	99 7f       	andi	r25, 0xF9	; 249
 4e8:	90 bd       	out	0x20, r25	; 32
 4ea:	9a b1       	in	r25, 0x0a	; 10
 4ec:	9b 7f       	andi	r25, 0xFB	; 251
 4ee:	9a b9       	out	0x0a, r25	; 10
 4f0:	1f c0       	rjmp	.+62     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 4f2:	90 b5       	in	r25, 0x20	; 32
 4f4:	92 60       	ori	r25, 0x02	; 2
 4f6:	9b 7f       	andi	r25, 0xFB	; 251
 4f8:	90 bd       	out	0x20, r25	; 32
 4fa:	9a b1       	in	r25, 0x0a	; 10
 4fc:	9b 7f       	andi	r25, 0xFB	; 251
 4fe:	9a b9       	out	0x0a, r25	; 10
 500:	17 c0       	rjmp	.+46     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 502:	90 b5       	in	r25, 0x20	; 32
 504:	9d 7f       	andi	r25, 0xFD	; 253
 506:	94 60       	ori	r25, 0x04	; 4
 508:	90 bd       	out	0x20, r25	; 32
 50a:	9a b1       	in	r25, 0x0a	; 10
 50c:	9b 7f       	andi	r25, 0xFB	; 251
 50e:	9a b9       	out	0x0a, r25	; 10
 510:	0f c0       	rjmp	.+30     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 512:	90 b5       	in	r25, 0x20	; 32
 514:	96 60       	ori	r25, 0x06	; 6
 516:	90 bd       	out	0x20, r25	; 32
 518:	9a b1       	in	r25, 0x0a	; 10
 51a:	9b 7f       	andi	r25, 0xFB	; 251
 51c:	9a b9       	out	0x0a, r25	; 10
 51e:	08 c0       	rjmp	.+16     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 520:	90 b5       	in	r25, 0x20	; 32
 522:	96 60       	ori	r25, 0x06	; 6
 524:	90 bd       	out	0x20, r25	; 32
 526:	9a b1       	in	r25, 0x0a	; 10
 528:	94 60       	ori	r25, 0x04	; 4
 52a:	9a b9       	out	0x0a, r25	; 10
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	9a b1       	in	r25, 0x0a	; 10
 532:	90 6c       	ori	r25, 0xC0	; 192
 534:	9a b9       	out	0x0a, r25	; 10
 536:	78 94       	sei
 538:	9b b1       	in	r25, 0x0b	; 11
 53a:	9d 7f       	andi	r25, 0xFD	; 253
 53c:	9b b9       	out	0x0b, r25	; 11
 53e:	93 e3       	ldi	r25, 0x33	; 51
 540:	99 b9       	out	0x09, r25	; 9
 542:	10 bc       	out	0x20, r1	; 32
 544:	08 95       	ret
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	08 95       	ret

0000054a <USART_send_byte>:
 54a:	cf 93       	push	r28
 54c:	c8 2f       	mov	r28, r24
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	0e 94 bf 01 	call	0x37e	; 0x37e <insert_queue>
 554:	8c 2f       	mov	r24, r28
 556:	0e 94 bf 01 	call	0x37e	; 0x37e <insert_queue>
 55a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <truncate_queue>
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	cf 91       	pop	r28
 562:	08 95       	ret

00000564 <USART_send_n_bytes>:
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
 56e:	00 97       	sbiw	r24, 0x00	; 0
 570:	b9 f0       	breq	.+46     	; 0x5a0 <USART_send_n_bytes+0x3c>
 572:	f6 2e       	mov	r15, r22
 574:	8c 01       	movw	r16, r24
 576:	86 2f       	mov	r24, r22
 578:	0e 94 bf 01 	call	0x37e	; 0x37e <insert_queue>
 57c:	c0 e0       	ldi	r28, 0x00	; 0
 57e:	d0 e0       	ldi	r29, 0x00	; 0
 580:	0a c0       	rjmp	.+20     	; 0x596 <USART_send_n_bytes+0x32>
 582:	f8 01       	movw	r30, r16
 584:	ec 0f       	add	r30, r28
 586:	f1 1d       	adc	r31, r1
 588:	80 81       	ld	r24, Z
 58a:	0e 94 bf 01 	call	0x37e	; 0x37e <insert_queue>
 58e:	d8 2f       	mov	r29, r24
 590:	81 11       	cpse	r24, r1
 592:	03 c0       	rjmp	.+6      	; 0x59a <USART_send_n_bytes+0x36>
 594:	cf 5f       	subi	r28, 0xFF	; 255
 596:	cf 15       	cp	r28, r15
 598:	a0 f3       	brcs	.-24     	; 0x582 <USART_send_n_bytes+0x1e>
 59a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <truncate_queue>
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <USART_send_n_bytes+0x3e>
 5a0:	d5 e0       	ldi	r29, 0x05	; 5
 5a2:	8d 2f       	mov	r24, r29
 5a4:	df 91       	pop	r29
 5a6:	cf 91       	pop	r28
 5a8:	1f 91       	pop	r17
 5aa:	0f 91       	pop	r16
 5ac:	ff 90       	pop	r15
 5ae:	08 95       	ret

000005b0 <USART_setCallBack>:


en_usart_error_code_t USART_setCallBack(en_usart_operating_state_t en_usart_operating_state ,void(*ptr_func)(void))
{
	en_usart_error_code_t en_usart_error_code_return = STATUS_OK;
	if(ptr_func != NULL)
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	89 f0       	breq	.+34     	; 0x5d8 <USART_setCallBack+0x28>
	{
		switch(en_usart_operating_state)
 5b6:	88 23       	and	r24, r24
 5b8:	19 f0       	breq	.+6      	; 0x5c0 <USART_setCallBack+0x10>
 5ba:	81 30       	cpi	r24, 0x01	; 1
 5bc:	39 f0       	breq	.+14     	; 0x5cc <USART_setCallBack+0x1c>
 5be:	0e c0       	rjmp	.+28     	; 0x5dc <USART_setCallBack+0x2c>
		{
			case USART_SEND_STATE:
			{
				ptr_USART_send = ptr_func ;
 5c0:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <ptr_USART_send+0x1>
 5c4:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <ptr_USART_send>
}


en_usart_error_code_t USART_setCallBack(en_usart_operating_state_t en_usart_operating_state ,void(*ptr_func)(void))
{
	en_usart_error_code_t en_usart_error_code_return = STATUS_OK;
 5c8:	80 e0       	ldi	r24, 0x00	; 0
		switch(en_usart_operating_state)
		{
			case USART_SEND_STATE:
			{
				ptr_USART_send = ptr_func ;
				break;
 5ca:	08 95       	ret
			}
			
			case USART_RECIEVE_STATE:
			{
				ptr_USART_recieve = ptr_func ;
 5cc:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <ptr_USART_recieve+0x1>
 5d0:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <ptr_USART_recieve>
}


en_usart_error_code_t USART_setCallBack(en_usart_operating_state_t en_usart_operating_state ,void(*ptr_func)(void))
{
	en_usart_error_code_t en_usart_error_code_return = STATUS_OK;
 5d4:	80 e0       	ldi	r24, 0x00	; 0
			}
			
			case USART_RECIEVE_STATE:
			{
				ptr_USART_recieve = ptr_func ;
				break;
 5d6:	08 95       	ret
			}
		}
	}
	else
	{
		en_usart_error_code_return = CALL_BACK_ERROR;
 5d8:	85 e0       	ldi	r24, 0x05	; 5
 5da:	08 95       	ret
				break;
			}
			
			default:
			{
				en_usart_error_code_return = CALL_BACK_ERROR;
 5dc:	85 e0       	ldi	r24, 0x05	; 5
	{
		en_usart_error_code_return = CALL_BACK_ERROR;
	}
	
	return en_usart_error_code_return;
}
 5de:	08 95       	ret

000005e0 <__vector_13>:



ISR(USART_RXC_INT)
{
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	2f 93       	push	r18
 5ec:	3f 93       	push	r19
 5ee:	4f 93       	push	r20
 5f0:	5f 93       	push	r21
 5f2:	6f 93       	push	r22
 5f4:	7f 93       	push	r23
 5f6:	8f 93       	push	r24
 5f8:	9f 93       	push	r25
 5fa:	af 93       	push	r26
 5fc:	bf 93       	push	r27
 5fe:	ef 93       	push	r30
 600:	ff 93       	push	r31
	
	if(gl_recieve_size == NULL)
 602:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <gl_recieve_size>
 606:	81 11       	cpse	r24, r1
 608:	04 c0       	rjmp	.+8      	; 0x612 <__vector_13+0x32>
	{
		// recieve size
		gl_recieve_size = UDR;
 60a:	8c b1       	in	r24, 0x0c	; 12
 60c:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <gl_recieve_size>
 610:	0d c0       	rjmp	.+26     	; 0x62c <__vector_13+0x4c>
	}
	else if(gl_recieve_index < gl_recieve_size)
 612:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <gl_recieve_index>
 616:	98 17       	cp	r25, r24
 618:	48 f4       	brcc	.+18     	; 0x62c <__vector_13+0x4c>
	{
		gl_recieve_arr[gl_recieve_index] = UDR ;
 61a:	e9 2f       	mov	r30, r25
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	8c b1       	in	r24, 0x0c	; 12
 620:	e2 51       	subi	r30, 0x12	; 18
 622:	fd 4f       	sbci	r31, 0xFD	; 253
 624:	80 83       	st	Z, r24
		gl_recieve_index++;
 626:	9f 5f       	subi	r25, 0xFF	; 255
 628:	90 93 ed 02 	sts	0x02ED, r25	; 0x8002ed <gl_recieve_index>
	}
	
	//receiving done
	if(gl_recieve_index == gl_recieve_size && gl_recieve_size != NULL)
 62c:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <gl_recieve_index>
 630:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <gl_recieve_size>
 634:	98 13       	cpse	r25, r24
 636:	0b c0       	rjmp	.+22     	; 0x64e <__vector_13+0x6e>
 638:	88 23       	and	r24, r24
 63a:	49 f0       	breq	.+18     	; 0x64e <__vector_13+0x6e>
	{
		gl_recieve_index = NULL;
 63c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <gl_recieve_index>
		gl_recieve_size  = NULL;
 640:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <gl_recieve_size>
		
		//fire call back
		ptr_USART_recieve();
 644:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <ptr_USART_recieve>
 648:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <ptr_USART_recieve+0x1>
 64c:	09 95       	icall
		
	}

	
}
 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <__vector_15>:

ISR(USART_TXC_INT)
{
 670:	1f 92       	push	r1
 672:	0f 92       	push	r0
 674:	0f b6       	in	r0, 0x3f	; 63
 676:	0f 92       	push	r0
 678:	11 24       	eor	r1, r1
 67a:	2f 93       	push	r18
 67c:	3f 93       	push	r19
 67e:	4f 93       	push	r20
 680:	5f 93       	push	r21
 682:	6f 93       	push	r22
 684:	7f 93       	push	r23
 686:	8f 93       	push	r24
 688:	9f 93       	push	r25
 68a:	af 93       	push	r26
 68c:	bf 93       	push	r27
 68e:	ef 93       	push	r30
 690:	ff 93       	push	r31
	// check if queue is empty
	if (truncate_queue()==QUEUE_EMPTY)
 692:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <truncate_queue>
 696:	84 30       	cpi	r24, 0x04	; 4
 698:	29 f4       	brne	.+10     	; 0x6a4 <__vector_15+0x34>
	{
		// fire send call back
		ptr_USART_send();
 69a:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <ptr_USART_send>
 69e:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <ptr_USART_send+0x1>
 6a2:	09 95       	icall
	}

 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0f be       	out	0x3f, r0	; 63
 6c0:	0f 90       	pop	r0
 6c2:	1f 90       	pop	r1
 6c4:	18 95       	reti

000006c6 <bcm_send_done>:
		{
			enu_bcm_status_return = CHANNEL_ERROR;
		}
	}
	return enu_bcm_status_return;
}
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <gl_bcm_send_done>
 6cc:	08 95       	ret

000006ce <bcm_recieve_done>:
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <gl_bcm_recieve_done>
 6d4:	08 95       	ret

000006d6 <bcm_init>:
 6d6:	0f 93       	push	r16
 6d8:	1f 93       	push	r17
 6da:	cf 93       	push	r28
 6dc:	00 97       	sbiw	r24, 0x00	; 0
 6de:	99 f1       	breq	.+102    	; 0x746 <bcm_init+0x70>
 6e0:	c0 e0       	ldi	r28, 0x00	; 0
 6e2:	2b c0       	rjmp	.+86     	; 0x73a <bcm_init+0x64>
 6e4:	dc 01       	movw	r26, r24
 6e6:	11 96       	adiw	r26, 0x01	; 1
 6e8:	6c 91       	ld	r22, X
 6ea:	4c 2f       	mov	r20, r28
 6ec:	50 e0       	ldi	r21, 0x00	; 0
 6ee:	fa 01       	movw	r30, r20
 6f0:	ee 0f       	add	r30, r30
 6f2:	ff 1f       	adc	r31, r31
 6f4:	9a 01       	movw	r18, r20
 6f6:	22 0f       	add	r18, r18
 6f8:	33 1f       	adc	r19, r19
 6fa:	22 0f       	add	r18, r18
 6fc:	33 1f       	adc	r19, r19
 6fe:	22 0f       	add	r18, r18
 700:	33 1f       	adc	r19, r19
 702:	e2 0f       	add	r30, r18
 704:	f3 1f       	adc	r31, r19
 706:	e6 53       	subi	r30, 0x36	; 54
 708:	fd 4f       	sbci	r31, 0xFD	; 253
 70a:	21 81       	ldd	r18, Z+1	; 0x01
 70c:	62 13       	cpse	r22, r18
 70e:	14 c0       	rjmp	.+40     	; 0x738 <bcm_init+0x62>
 710:	8f 01       	movw	r16, r30
 712:	02 80       	ldd	r0, Z+2	; 0x02
 714:	f3 81       	ldd	r31, Z+3	; 0x03
 716:	e0 2d       	mov	r30, r0
 718:	86 2f       	mov	r24, r22
 71a:	09 95       	icall
 71c:	f8 01       	movw	r30, r16
 71e:	00 85       	ldd	r16, Z+8	; 0x08
 720:	11 85       	ldd	r17, Z+9	; 0x09
 722:	63 e6       	ldi	r22, 0x63	; 99
 724:	73 e0       	ldi	r23, 0x03	; 3
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	f8 01       	movw	r30, r16
 72a:	09 95       	icall
 72c:	67 e6       	ldi	r22, 0x67	; 103
 72e:	73 e0       	ldi	r23, 0x03	; 3
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	f8 01       	movw	r30, r16
 734:	09 95       	icall
 736:	03 c0       	rjmp	.+6      	; 0x73e <bcm_init+0x68>
 738:	cf 5f       	subi	r28, 0xFF	; 255
 73a:	c2 30       	cpi	r28, 0x02	; 2
 73c:	98 f2       	brcs	.-90     	; 0x6e4 <bcm_init+0xe>
 73e:	c2 30       	cpi	r28, 0x02	; 2
 740:	21 f0       	breq	.+8      	; 0x74a <bcm_init+0x74>
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	03 c0       	rjmp	.+6      	; 0x74c <bcm_init+0x76>
 746:	82 e0       	ldi	r24, 0x02	; 2
 748:	01 c0       	rjmp	.+2      	; 0x74c <bcm_init+0x76>
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	cf 91       	pop	r28
 74e:	1f 91       	pop	r17
 750:	0f 91       	pop	r16
 752:	08 95       	ret

00000754 <bcm_send_n>:
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
 754:	cf 93       	push	r28
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = FALSE ;
	
	if(ptr_str_bcm_instance == NULL)
 756:	00 97       	sbiw	r24, 0x00	; 0
 758:	21 f1       	breq	.+72     	; 0x7a2 <bcm_send_n+0x4e>
 75a:	c0 e0       	ldi	r28, 0x00	; 0
 75c:	1e c0       	rjmp	.+60     	; 0x79a <bcm_send_n+0x46>
	
	else
	{
		for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
		{
			if(ptr_str_bcm_instance->en_bcm_channel == str_bcm_instance[uint8_loc_counter].en_bcm_channel)
 75e:	fc 01       	movw	r30, r24
 760:	51 81       	ldd	r21, Z+1	; 0x01
 762:	ac 2f       	mov	r26, r28
 764:	b0 e0       	ldi	r27, 0x00	; 0
 766:	fd 01       	movw	r30, r26
 768:	ee 0f       	add	r30, r30
 76a:	ff 1f       	adc	r31, r31
 76c:	9d 01       	movw	r18, r26
 76e:	22 0f       	add	r18, r18
 770:	33 1f       	adc	r19, r19
 772:	22 0f       	add	r18, r18
 774:	33 1f       	adc	r19, r19
 776:	22 0f       	add	r18, r18
 778:	33 1f       	adc	r19, r19
 77a:	e2 0f       	add	r30, r18
 77c:	f3 1f       	adc	r31, r19
 77e:	e6 53       	subi	r30, 0x36	; 54
 780:	fd 4f       	sbci	r31, 0xFD	; 253
 782:	21 81       	ldd	r18, Z+1	; 0x01
 784:	52 13       	cpse	r21, r18
 786:	08 c0       	rjmp	.+16     	; 0x798 <bcm_send_n+0x44>
 788:	cb 01       	movw	r24, r22
			{
				str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
 78a:	06 80       	ldd	r0, Z+6	; 0x06
 78c:	f7 81       	ldd	r31, Z+7	; 0x07
 78e:	e0 2d       	mov	r30, r0
 790:	64 2f       	mov	r22, r20
 792:	09 95       	icall
	}
	return enu_bcm_status_return;
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 794:	80 e0       	ldi	r24, 0x00	; 0
		for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
		{
			if(ptr_str_bcm_instance->en_bcm_channel == str_bcm_instance[uint8_loc_counter].en_bcm_channel)
			{
				str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
				break;
 796:	07 c0       	rjmp	.+14     	; 0x7a6 <bcm_send_n+0x52>
		enu_bcm_status_return = NULL_POINTER;
	}
	
	else
	{
		for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 798:	cf 5f       	subi	r28, 0xFF	; 255
 79a:	c2 30       	cpi	r28, 0x02	; 2
 79c:	00 f3       	brcs	.-64     	; 0x75e <bcm_send_n+0xa>
	}
	return enu_bcm_status_return;
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 79e:	80 e0       	ldi	r24, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <bcm_send_n+0x52>
	uint8_t uint8_loc_counter = FALSE ;
 7a2:	c0 e0       	ldi	r28, 0x00	; 0
	
	if(ptr_str_bcm_instance == NULL)
	{
		enu_bcm_status_return = NULL_POINTER;
 7a4:	82 e0       	ldi	r24, 0x02	; 2
			}
		}
	}
	
	
	if(uint8_loc_counter == BCM_INSTANCES)
 7a6:	c2 30       	cpi	r28, 0x02	; 2
 7a8:	09 f4       	brne	.+2      	; 0x7ac <bcm_send_n+0x58>
	{
		enu_bcm_status_return = CHANNEL_ERROR;
 7aa:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_bcm_status_return;

}
 7ac:	cf 91       	pop	r28
 7ae:	08 95       	ret

000007b0 <bcm_dispatcher>:

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
 7b0:	89 2b       	or	r24, r25
 7b2:	51 f0       	breq	.+20     	; 0x7c8 <bcm_dispatcher+0x18>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == TRUE)
 7b4:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <gl_bcm_send_done>
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	41 f0       	breq	.+16     	; 0x7cc <bcm_dispatcher+0x1c>
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
	}
	
	else if(gl_bcm_recieve_done == TRUE)
 7bc:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <gl_bcm_recieve_done>
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	31 f0       	breq	.+12     	; 0x7d0 <bcm_dispatcher+0x20>

}

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 7c4:	80 e0       	ldi	r24, 0x00	; 0
 7c6:	08 95       	ret
	
	if(ptr_str_bcm_instance_t == NULL)
	{
		 enu_bcm_status_return = NULL_POINTER;
 7c8:	82 e0       	ldi	r24, 0x02	; 2
 7ca:	08 95       	ret
	}
	else if(gl_bcm_send_done == TRUE)
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
 7cc:	83 e0       	ldi	r24, 0x03	; 3
 7ce:	08 95       	ret
	}
	
	else if(gl_bcm_recieve_done == TRUE)
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
 7d0:	84 e0       	ldi	r24, 0x04	; 4
	}
	
	return enu_bcm_status_return;
}
 7d2:	08 95       	ret

000007d4 <strcmp>:
 7d4:	fb 01       	movw	r30, r22
 7d6:	dc 01       	movw	r26, r24
 7d8:	8d 91       	ld	r24, X+
 7da:	01 90       	ld	r0, Z+
 7dc:	80 19       	sub	r24, r0
 7de:	01 10       	cpse	r0, r1
 7e0:	d9 f3       	breq	.-10     	; 0x7d8 <strcmp+0x4>
 7e2:	99 0b       	sbc	r25, r25
 7e4:	08 95       	ret

000007e6 <_exit>:
 7e6:	f8 94       	cli

000007e8 <__stop_program>:
 7e8:	ff cf       	rjmp	.-2      	; 0x7e8 <__stop_program>
