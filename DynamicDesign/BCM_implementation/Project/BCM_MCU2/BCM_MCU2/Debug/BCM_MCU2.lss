
BCM_MCU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000007a4  00000838  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dd  00800174  00800174  0000094c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ac  00000000  00000000  00000b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdd  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e3  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000049cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d58  00000000  00000000  00004cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e7  00000000  00000000  00005a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006e2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 35       	cpi	r26, 0x51	; 81
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bc 00 	call	0x178	; 0x178 <main>
  8a:	0c 94 d0 03 	jmp	0x7a0	; 0x7a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:
// variable return for bcm
enu_bcm_status_t gl_enu_bcm_status_return = BCM_OKAY;
void app_init(void)
{
	
	LED_init(&gl_error_led);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
	// init leds and check on their return
	
	if( (LED_init(&gl_str_send_complete_led) != LED_OK) || (LED_init(&gl_str_recieve_complete_led) != LED_OK))
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  a2:	81 11       	cpse	r24, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <app_init+0x20>
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 ab 00 	call	0x156	; 0x156 <LED_init>
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <app_init+0x26>
	{
		gl_enu_app_state = BLOCKED;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
	}
	
	
	gl_enu_bcm_status_return = bcm_init(&gl_str_bcm_instance_app);
  b8:	85 e7       	ldi	r24, 0x75	; 117
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 44 03 	call	0x688	; 0x688 <bcm_init>
  c0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
	if((gl_enu_bcm_status_return != BCM_OKAY) && (gl_enu_app_state != BLOCKED))
  c4:	88 23       	and	r24, r24
  c6:	39 f0       	breq	.+14     	; 0xd6 <app_init+0x44>
  c8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <gl_enu_app_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	19 f0       	breq	.+6      	; 0xd6 <app_init+0x44>
	{
		gl_enu_app_state = BLOCKED;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
  d6:	08 95       	ret

000000d8 <app_start>:
	
}

void app_start(void)
{
	switch(gl_enu_app_state)
  d8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <gl_enu_app_state>
  dc:	88 23       	and	r24, r24
  de:	19 f0       	breq	.+6      	; 0xe6 <app_start+0xe>
  e0:	81 30       	cpi	r24, 0x01	; 1
  e2:	a1 f1       	breq	.+104    	; 0x14c <app_start+0x74>
  e4:	08 95       	ret
	{
		case IDLE :
		{
			gl_enu_bcm_status_return = bcm_dispatcher(&gl_str_bcm_instance_app);
  e6:	85 e7       	ldi	r24, 0x75	; 117
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 b1 03 	call	0x762	; 0x762 <bcm_dispatcher>
  ee:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
			if(gl_enu_bcm_status_return == SEND_OPERATION_DONE)
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	29 f4       	brne	.+10     	; 0x100 <app_start+0x28>
			{
				LED_toggle(&gl_str_send_complete_led);
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 b4 00 	call	0x168	; 0x168 <LED_toggle>
  fe:	08 95       	ret
			}
			else if(gl_enu_bcm_status_return == REC_OPERATION_DONE)
 100:	84 30       	cpi	r24, 0x04	; 4
 102:	f1 f4       	brne	.+60     	; 0x140 <app_start+0x68>
			{
				if(!strcmp(gl_rec_string_from_dest,gl_recieve_arr))
 104:	63 e8       	ldi	r22, 0x83	; 131
 106:	71 e0       	ldi	r23, 0x01	; 1
 108:	86 e7       	ldi	r24, 0x76	; 118
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 c7 03 	call	0x78e	; 0x78e <strcmp>
 110:	89 2b       	or	r24, r25
 112:	01 f5       	brne	.+64     	; 0x154 <app_start+0x7c>
				{
					LED_toggle(&gl_str_recieve_complete_led);
 114:	86 e8       	ldi	r24, 0x86	; 134
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 b4 00 	call	0x168	; 0x168 <LED_toggle>
					gl_enu_bcm_status_return = bcm_send_n(&gl_str_bcm_instance_app,gl_send_string_to_dest,strlen(gl_send_string_to_dest));
 11c:	e0 e6       	ldi	r30, 0x60	; 96
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	01 90       	ld	r0, Z+
 122:	00 20       	and	r0, r0
 124:	e9 f7       	brne	.-6      	; 0x120 <app_start+0x48>
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	af 01       	movw	r20, r30
 12a:	40 56       	subi	r20, 0x60	; 96
 12c:	50 40       	sbci	r21, 0x00	; 0
 12e:	60 e6       	ldi	r22, 0x60	; 96
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	85 e7       	ldi	r24, 0x75	; 117
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 83 03 	call	0x706	; 0x706 <bcm_send_n>
 13a:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
 13e:	08 95       	ret
				}
				
			}
			
			else if(gl_enu_bcm_status_return == NULL_POINTER)
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	41 f4       	brne	.+16     	; 0x154 <app_start+0x7c>
			{
				gl_enu_app_state = BLOCKED;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
 14a:	08 95       	ret
			break;
		}
		
		case BLOCKED :
		{
			LED_toggle(&gl_error_led);
 14c:	84 e8       	ldi	r24, 0x84	; 132
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 b4 00 	call	0x168	; 0x168 <LED_toggle>
 154:	08 95       	ret

00000156 <LED_init>:
	else return LED_NOT_OK;
}
enu_led_error_t LED_off(str_led_config_t *str_ptr_led_config){
	if(!DIO_write(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber,LOW))return LED_OK;
	else return LED_NOT_OK;
}
 156:	41 e0       	ldi	r20, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	61 81       	ldd	r22, Z+1	; 0x01
 15c:	80 81       	ld	r24, Z
 15e:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_init>
 162:	81 11       	cpse	r24, r1
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret

00000168 <LED_toggle>:
enu_led_error_t LED_toggle(str_led_config_t *str_ptr_led_config){
	if(!DIO_toggle(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber))return LED_OK;
 168:	fc 01       	movw	r30, r24
 16a:	61 81       	ldd	r22, Z+1	; 0x01
 16c:	80 81       	ld	r24, Z
 16e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <DIO_toggle>
 172:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 174:	81 e0       	ldi	r24, 0x01	; 1
}
 176:	08 95       	ret

00000178 <main>:
#include "App/app.h"


int main(void)
{
    app_init();
 178:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 17c:	0e 94 6c 00 	call	0xd8	; 0xd8 <app_start>
 180:	fd cf       	rjmp	.-6      	; 0x17c <main+0x4>

00000182 <DIO_init>:
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 182:	88 30       	cpi	r24, 0x08	; 8
 184:	08 f0       	brcs	.+2      	; 0x188 <DIO_init+0x6>
 186:	90 c0       	rjmp	.+288    	; 0x2a8 <DIO_init+0x126>
 188:	61 30       	cpi	r22, 0x01	; 1
 18a:	51 f1       	breq	.+84     	; 0x1e0 <DIO_init+0x5e>
 18c:	38 f0       	brcs	.+14     	; 0x19c <DIO_init+0x1a>
 18e:	62 30       	cpi	r22, 0x02	; 2
 190:	09 f4       	brne	.+2      	; 0x194 <DIO_init+0x12>
 192:	48 c0       	rjmp	.+144    	; 0x224 <DIO_init+0xa2>
 194:	63 30       	cpi	r22, 0x03	; 3
 196:	09 f4       	brne	.+2      	; 0x19a <DIO_init+0x18>
 198:	66 c0       	rjmp	.+204    	; 0x266 <DIO_init+0xe4>
 19a:	88 c0       	rjmp	.+272    	; 0x2ac <DIO_init+0x12a>
 19c:	41 11       	cpse	r20, r1
 19e:	0f c0       	rjmp	.+30     	; 0x1be <DIO_init+0x3c>
 1a0:	4a b3       	in	r20, 0x1a	; 26
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_init+0x2c>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	8a 95       	dec	r24
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_init+0x28>
 1b2:	cb 01       	movw	r24, r22
 1b4:	80 95       	com	r24
 1b6:	84 23       	and	r24, r20
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	08 95       	ret
 1be:	41 30       	cpi	r20, 0x01	; 1
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <DIO_init+0x42>
 1c2:	76 c0       	rjmp	.+236    	; 0x2b0 <DIO_init+0x12e>
 1c4:	4a b3       	in	r20, 0x1a	; 26
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_init+0x50>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	8a 95       	dec	r24
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_init+0x4c>
 1d6:	cb 01       	movw	r24, r22
 1d8:	84 2b       	or	r24, r20
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	08 95       	ret
 1e0:	41 11       	cpse	r20, r1
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <DIO_init+0x80>
 1e4:	47 b3       	in	r20, 0x17	; 23
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_init+0x70>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_init+0x6c>
 1f6:	cb 01       	movw	r24, r22
 1f8:	80 95       	com	r24
 1fa:	84 23       	and	r24, r20
 1fc:	87 bb       	out	0x17, r24	; 23
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	08 95       	ret
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	09 f0       	breq	.+2      	; 0x208 <DIO_init+0x86>
 206:	56 c0       	rjmp	.+172    	; 0x2b4 <DIO_init+0x132>
 208:	47 b3       	in	r20, 0x17	; 23
 20a:	21 e0       	ldi	r18, 0x01	; 1
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	b9 01       	movw	r22, r18
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_init+0x94>
 212:	66 0f       	add	r22, r22
 214:	77 1f       	adc	r23, r23
 216:	8a 95       	dec	r24
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_init+0x90>
 21a:	cb 01       	movw	r24, r22
 21c:	84 2b       	or	r24, r20
 21e:	87 bb       	out	0x17, r24	; 23
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	08 95       	ret
 224:	41 11       	cpse	r20, r1
 226:	0f c0       	rjmp	.+30     	; 0x246 <DIO_init+0xc4>
 228:	44 b3       	in	r20, 0x14	; 20
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	b9 01       	movw	r22, r18
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_init+0xb4>
 232:	66 0f       	add	r22, r22
 234:	77 1f       	adc	r23, r23
 236:	8a 95       	dec	r24
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_init+0xb0>
 23a:	cb 01       	movw	r24, r22
 23c:	80 95       	com	r24
 23e:	84 23       	and	r24, r20
 240:	84 bb       	out	0x14, r24	; 20
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	08 95       	ret
 246:	41 30       	cpi	r20, 0x01	; 1
 248:	b9 f5       	brne	.+110    	; 0x2b8 <DIO_init+0x136>
 24a:	44 b3       	in	r20, 0x14	; 20
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_init+0xd6>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_init+0xd2>
 25c:	cb 01       	movw	r24, r22
 25e:	84 2b       	or	r24, r20
 260:	84 bb       	out	0x14, r24	; 20
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
 266:	41 11       	cpse	r20, r1
 268:	0f c0       	rjmp	.+30     	; 0x288 <DIO_init+0x106>
 26a:	41 b3       	in	r20, 0x11	; 17
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_init+0xf6>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_init+0xf2>
 27c:	cb 01       	movw	r24, r22
 27e:	80 95       	com	r24
 280:	84 23       	and	r24, r20
 282:	81 bb       	out	0x11, r24	; 17
 284:	80 e0       	ldi	r24, 0x00	; 0
 286:	08 95       	ret
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	c1 f4       	brne	.+48     	; 0x2bc <DIO_init+0x13a>
 28c:	41 b3       	in	r20, 0x11	; 17
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_init+0x118>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_init+0x114>
 29e:	cb 01       	movw	r24, r22
 2a0:	84 2b       	or	r24, r20
 2a2:	81 bb       	out	0x11, r24	; 17
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	08 95       	ret
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret

000002c0 <DIO_toggle>:
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 2c0:	88 30       	cpi	r24, 0x08	; 8
 2c2:	08 f0       	brcs	.+2      	; 0x2c6 <DIO_toggle+0x6>
 2c4:	40 c0       	rjmp	.+128    	; 0x346 <DIO_toggle+0x86>
	switch(portNumber){
 2c6:	61 30       	cpi	r22, 0x01	; 1
 2c8:	a1 f0       	breq	.+40     	; 0x2f2 <DIO_toggle+0x32>
 2ca:	28 f0       	brcs	.+10     	; 0x2d6 <DIO_toggle+0x16>
 2cc:	62 30       	cpi	r22, 0x02	; 2
 2ce:	f9 f0       	breq	.+62     	; 0x30e <DIO_toggle+0x4e>
 2d0:	63 30       	cpi	r22, 0x03	; 3
 2d2:	59 f1       	breq	.+86     	; 0x32a <DIO_toggle+0x6a>
 2d4:	3a c0       	rjmp	.+116    	; 0x34a <DIO_toggle+0x8a>
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
 2d6:	4b b3       	in	r20, 0x1b	; 27
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_toggle+0x24>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	8a 95       	dec	r24
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_toggle+0x20>
 2e8:	cb 01       	movw	r24, r22
 2ea:	84 27       	eor	r24, r20
 2ec:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 2ee:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
 2f0:	08 95       	ret
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
 2f2:	48 b3       	in	r20, 0x18	; 24
 2f4:	21 e0       	ldi	r18, 0x01	; 1
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	b9 01       	movw	r22, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_toggle+0x40>
 2fc:	66 0f       	add	r22, r22
 2fe:	77 1f       	adc	r23, r23
 300:	8a 95       	dec	r24
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_toggle+0x3c>
 304:	cb 01       	movw	r24, r22
 306:	84 27       	eor	r24, r20
 308:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 30a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
 30c:	08 95       	ret
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
 30e:	45 b3       	in	r20, 0x15	; 21
 310:	21 e0       	ldi	r18, 0x01	; 1
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	b9 01       	movw	r22, r18
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_toggle+0x5c>
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	8a 95       	dec	r24
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_toggle+0x58>
 320:	cb 01       	movw	r24, r22
 322:	84 27       	eor	r24, r20
 324:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 326:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
 328:	08 95       	ret
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
 32a:	42 b3       	in	r20, 0x12	; 18
 32c:	21 e0       	ldi	r18, 0x01	; 1
 32e:	30 e0       	ldi	r19, 0x00	; 0
 330:	b9 01       	movw	r22, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <DIO_toggle+0x78>
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	8a 95       	dec	r24
 33a:	e2 f7       	brpl	.-8      	; 0x334 <DIO_toggle+0x74>
 33c:	cb 01       	movw	r24, r22
 33e:	84 27       	eor	r24, r20
 340:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 342:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
 344:	08 95       	ret
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	08 95       	ret
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 34a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return DIO_OK;
}
 34c:	08 95       	ret

0000034e <insert_queue>:
		USART_recieve_byte(&uint8_arg_arr_bytes[uint8_loc_counter]);
		uint8_loc_counter++;
	}
	
	return STATUS_OK;
}
 34e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 352:	99 23       	and	r25, r25
 354:	14 f4       	brge	.+4      	; 0x35a <insert_queue+0xc>
 356:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 35a:	a2 e5       	ldi	r26, 0x52	; 82
 35c:	b1 e0       	ldi	r27, 0x01	; 1
 35e:	ec 91       	ld	r30, X
 360:	ef 5f       	subi	r30, 0xFF	; 255
 362:	ec 93       	st	X, r30
 364:	0e 2e       	mov	r0, r30
 366:	00 0c       	add	r0, r0
 368:	ff 0b       	sbc	r31, r31
 36a:	e7 57       	subi	r30, 0x77	; 119
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	80 83       	st	Z, r24
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret

00000374 <truncate_queue>:
 374:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 378:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_gl_usart_tasks_queue+0xc9>
 37c:	8e 17       	cp	r24, r30
 37e:	14 f0       	brlt	.+4      	; 0x384 <truncate_queue+0x10>
 380:	ef 3f       	cpi	r30, 0xFF	; 255
 382:	39 f4       	brne	.+14     	; 0x392 <truncate_queue+0x1e>
 384:	8f ef       	ldi	r24, 0xFF	; 255
 386:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 38a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <str_gl_usart_tasks_queue+0xc9>
 38e:	84 e0       	ldi	r24, 0x04	; 4
 390:	08 95       	ret
 392:	0e 2e       	mov	r0, r30
 394:	00 0c       	add	r0, r0
 396:	ff 0b       	sbc	r31, r31
 398:	e7 57       	subi	r30, 0x77	; 119
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	80 81       	ld	r24, Z
 39e:	8c b9       	out	0x0c, r24	; 12
 3a0:	e1 e5       	ldi	r30, 0x51	; 81
 3a2:	f1 e0       	ldi	r31, 0x01	; 1
 3a4:	80 81       	ld	r24, Z
 3a6:	8f 5f       	subi	r24, 0xFF	; 255
 3a8:	80 83       	st	Z, r24
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	08 95       	ret

000003ae <USART_setCallBack>:
 3ae:	61 15       	cp	r22, r1
 3b0:	71 05       	cpc	r23, r1
 3b2:	89 f0       	breq	.+34     	; 0x3d6 <USART_setCallBack+0x28>
 3b4:	88 23       	and	r24, r24
 3b6:	19 f0       	breq	.+6      	; 0x3be <USART_setCallBack+0x10>
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	39 f0       	breq	.+14     	; 0x3ca <USART_setCallBack+0x1c>
 3bc:	0e c0       	rjmp	.+28     	; 0x3da <USART_setCallBack+0x2c>
 3be:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <ptr_USART_send+0x1>
 3c2:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <ptr_USART_send>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	08 95       	ret
 3ca:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <ptr_USART_recieve+0x1>
 3ce:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <ptr_USART_recieve>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	08 95       	ret
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	08 95       	ret
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	08 95       	ret

000003de <USART_init>:
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	19 c0       	rjmp	.+50     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	f9 01       	movw	r30, r18
 3e8:	ee 0f       	add	r30, r30
 3ea:	ff 1f       	adc	r31, r31
 3ec:	e2 0f       	add	r30, r18
 3ee:	f3 1f       	adc	r31, r19
 3f0:	ee 0f       	add	r30, r30
 3f2:	ff 1f       	adc	r31, r31
 3f4:	ed 5a       	subi	r30, 0xAD	; 173
 3f6:	fe 4f       	sbci	r31, 0xFE	; 254
 3f8:	90 81       	ld	r25, Z
 3fa:	89 13       	cpse	r24, r25
 3fc:	0a c0       	rjmp	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fe:	f9 01       	movw	r30, r18
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	e2 0f       	add	r30, r18
 406:	f3 1f       	adc	r31, r19
 408:	ee 0f       	add	r30, r30
 40a:	ff 1f       	adc	r31, r31
 40c:	ed 5a       	subi	r30, 0xAD	; 173
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	05 c0       	rjmp	.+10     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 412:	8f 5f       	subi	r24, 0xFF	; 255
 414:	82 30       	cpi	r24, 0x02	; 2
 416:	28 f3       	brcs	.-54     	; 0x3e2 <USART_init+0x4>
 418:	e0 e0       	ldi	r30, 0x00	; 0
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	30 97       	sbiw	r30, 0x00	; 0
 41e:	09 f4       	brne	.+2      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 420:	92 c0       	rjmp	.+292    	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
 422:	80 b5       	in	r24, 0x20	; 32
 424:	80 68       	ori	r24, 0x80	; 128
 426:	80 bd       	out	0x20, r24	; 32
 428:	91 81       	ldd	r25, Z+1	; 0x01
 42a:	99 23       	and	r25, r25
 42c:	19 f0       	breq	.+6      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 42e:	91 30       	cpi	r25, 0x01	; 1
 430:	29 f0       	breq	.+10     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 432:	08 c0       	rjmp	.+16     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 434:	8f 7b       	andi	r24, 0xBF	; 191
 436:	80 bd       	out	0x20, r24	; 32
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	80 bd       	out	0x20, r24	; 32
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	01 c0       	rjmp	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 444:	82 e0       	ldi	r24, 0x02	; 2
 446:	81 11       	cpse	r24, r1
 448:	16 c0       	rjmp	.+44     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 44a:	92 81       	ldd	r25, Z+2	; 0x02
 44c:	91 30       	cpi	r25, 0x01	; 1
 44e:	49 f0       	breq	.+18     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 450:	18 f0       	brcs	.+6      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 452:	92 30       	cpi	r25, 0x02	; 2
 454:	59 f0       	breq	.+22     	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 456:	0e c0       	rjmp	.+28     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 458:	9a b1       	in	r25, 0x0a	; 10
 45a:	9f 7e       	andi	r25, 0xEF	; 239
 45c:	98 60       	ori	r25, 0x08	; 8
 45e:	9a b9       	out	0x0a, r25	; 10
 460:	0a c0       	rjmp	.+20     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 462:	9a b1       	in	r25, 0x0a	; 10
 464:	90 61       	ori	r25, 0x10	; 16
 466:	97 7f       	andi	r25, 0xF7	; 247
 468:	9a b9       	out	0x0a, r25	; 10
 46a:	05 c0       	rjmp	.+10     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46c:	9a b1       	in	r25, 0x0a	; 10
 46e:	98 61       	ori	r25, 0x18	; 24
 470:	9a b9       	out	0x0a, r25	; 10
 472:	01 c0       	rjmp	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	82 e0       	ldi	r24, 0x02	; 2
 476:	81 11       	cpse	r24, r1
 478:	14 c0       	rjmp	.+40     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 47a:	93 81       	ldd	r25, Z+3	; 0x03
 47c:	91 30       	cpi	r25, 0x01	; 1
 47e:	41 f0       	breq	.+16     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 480:	58 f0       	brcs	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 482:	92 30       	cpi	r25, 0x02	; 2
 484:	69 f4       	brne	.+26     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 486:	90 b5       	in	r25, 0x20	; 32
 488:	9f 7e       	andi	r25, 0xEF	; 239
 48a:	90 62       	ori	r25, 0x20	; 32
 48c:	90 bd       	out	0x20, r25	; 32
 48e:	09 c0       	rjmp	.+18     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 490:	90 b5       	in	r25, 0x20	; 32
 492:	90 63       	ori	r25, 0x30	; 48
 494:	90 bd       	out	0x20, r25	; 32
 496:	05 c0       	rjmp	.+10     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 498:	90 b5       	in	r25, 0x20	; 32
 49a:	9f 7c       	andi	r25, 0xCF	; 207
 49c:	90 bd       	out	0x20, r25	; 32
 49e:	01 c0       	rjmp	.+2      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4a0:	82 e0       	ldi	r24, 0x02	; 2
 4a2:	81 11       	cpse	r24, r1
 4a4:	0f c0       	rjmp	.+30     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4a6:	94 81       	ldd	r25, Z+4	; 0x04
 4a8:	99 23       	and	r25, r25
 4aa:	19 f0       	breq	.+6      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
 4ac:	91 30       	cpi	r25, 0x01	; 1
 4ae:	29 f0       	breq	.+10     	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 4b2:	90 b5       	in	r25, 0x20	; 32
 4b4:	97 7f       	andi	r25, 0xF7	; 247
 4b6:	90 bd       	out	0x20, r25	; 32
 4b8:	05 c0       	rjmp	.+10     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4ba:	90 b5       	in	r25, 0x20	; 32
 4bc:	98 60       	ori	r25, 0x08	; 8
 4be:	90 bd       	out	0x20, r25	; 32
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	81 11       	cpse	r24, r1
 4c6:	34 c0       	rjmp	.+104    	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 4c8:	95 81       	ldd	r25, Z+5	; 0x05
 4ca:	92 30       	cpi	r25, 0x02	; 2
 4cc:	d1 f0       	breq	.+52     	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 4ce:	28 f4       	brcc	.+10     	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d0:	99 23       	and	r25, r25
 4d2:	41 f0       	breq	.+16     	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4d4:	91 30       	cpi	r25, 0x01	; 1
 4d6:	69 f0       	breq	.+26     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4d8:	2a c0       	rjmp	.+84     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4da:	93 30       	cpi	r25, 0x03	; 3
 4dc:	d1 f0       	breq	.+52     	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
 4de:	94 30       	cpi	r25, 0x04	; 4
 4e0:	f9 f0       	breq	.+62     	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 4e2:	25 c0       	rjmp	.+74     	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 4e4:	90 b5       	in	r25, 0x20	; 32
 4e6:	99 7f       	andi	r25, 0xF9	; 249
 4e8:	90 bd       	out	0x20, r25	; 32
 4ea:	9a b1       	in	r25, 0x0a	; 10
 4ec:	9b 7f       	andi	r25, 0xFB	; 251
 4ee:	9a b9       	out	0x0a, r25	; 10
 4f0:	1f c0       	rjmp	.+62     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 4f2:	90 b5       	in	r25, 0x20	; 32
 4f4:	92 60       	ori	r25, 0x02	; 2
 4f6:	9b 7f       	andi	r25, 0xFB	; 251
 4f8:	90 bd       	out	0x20, r25	; 32
 4fa:	9a b1       	in	r25, 0x0a	; 10
 4fc:	9b 7f       	andi	r25, 0xFB	; 251
 4fe:	9a b9       	out	0x0a, r25	; 10
 500:	17 c0       	rjmp	.+46     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 502:	90 b5       	in	r25, 0x20	; 32
 504:	9d 7f       	andi	r25, 0xFD	; 253
 506:	94 60       	ori	r25, 0x04	; 4
 508:	90 bd       	out	0x20, r25	; 32
 50a:	9a b1       	in	r25, 0x0a	; 10
 50c:	9b 7f       	andi	r25, 0xFB	; 251
 50e:	9a b9       	out	0x0a, r25	; 10
 510:	0f c0       	rjmp	.+30     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 512:	90 b5       	in	r25, 0x20	; 32
 514:	96 60       	ori	r25, 0x06	; 6
 516:	90 bd       	out	0x20, r25	; 32
 518:	9a b1       	in	r25, 0x0a	; 10
 51a:	9b 7f       	andi	r25, 0xFB	; 251
 51c:	9a b9       	out	0x0a, r25	; 10
 51e:	08 c0       	rjmp	.+16     	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 520:	90 b5       	in	r25, 0x20	; 32
 522:	96 60       	ori	r25, 0x06	; 6
 524:	90 bd       	out	0x20, r25	; 32
 526:	9a b1       	in	r25, 0x0a	; 10
 528:	94 60       	ori	r25, 0x04	; 4
 52a:	9a b9       	out	0x0a, r25	; 10
 52c:	01 c0       	rjmp	.+2      	; 0x530 <__EEPROM_REGION_LENGTH__+0x130>
 52e:	82 e0       	ldi	r24, 0x02	; 2
 530:	9a b1       	in	r25, 0x0a	; 10
 532:	90 6c       	ori	r25, 0xC0	; 192
 534:	9a b9       	out	0x0a, r25	; 10
 536:	78 94       	sei
 538:	9b b1       	in	r25, 0x0b	; 11
 53a:	9d 7f       	andi	r25, 0xFD	; 253
 53c:	9b b9       	out	0x0b, r25	; 11
 53e:	93 e3       	ldi	r25, 0x33	; 51
 540:	99 b9       	out	0x09, r25	; 9
 542:	10 bc       	out	0x20, r1	; 32
 544:	08 95       	ret
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	08 95       	ret

0000054a <USART_send_byte>:
 54a:	cf 93       	push	r28
 54c:	0e 94 a7 01 	call	0x34e	; 0x34e <insert_queue>
 550:	c8 2f       	mov	r28, r24
 552:	0e 94 ba 01 	call	0x374	; 0x374 <truncate_queue>
 556:	8c 2f       	mov	r24, r28
 558:	cf 91       	pop	r28
 55a:	08 95       	ret

0000055c <USART_send_n_bytes>:
 55c:	ff 92       	push	r15
 55e:	0f 93       	push	r16
 560:	1f 93       	push	r17
 562:	cf 93       	push	r28
 564:	df 93       	push	r29
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	a1 f0       	breq	.+40     	; 0x592 <USART_send_n_bytes+0x36>
 56a:	f6 2e       	mov	r15, r22
 56c:	8c 01       	movw	r16, r24
 56e:	c0 e0       	ldi	r28, 0x00	; 0
 570:	d0 e0       	ldi	r29, 0x00	; 0
 572:	0a c0       	rjmp	.+20     	; 0x588 <USART_send_n_bytes+0x2c>
 574:	f8 01       	movw	r30, r16
 576:	ec 0f       	add	r30, r28
 578:	f1 1d       	adc	r31, r1
 57a:	80 81       	ld	r24, Z
 57c:	0e 94 a7 01 	call	0x34e	; 0x34e <insert_queue>
 580:	d8 2f       	mov	r29, r24
 582:	81 11       	cpse	r24, r1
 584:	03 c0       	rjmp	.+6      	; 0x58c <USART_send_n_bytes+0x30>
 586:	cf 5f       	subi	r28, 0xFF	; 255
 588:	cf 15       	cp	r28, r15
 58a:	a0 f3       	brcs	.-24     	; 0x574 <USART_send_n_bytes+0x18>
 58c:	0e 94 ba 01 	call	0x374	; 0x374 <truncate_queue>
 590:	01 c0       	rjmp	.+2      	; 0x594 <USART_send_n_bytes+0x38>
 592:	d5 e0       	ldi	r29, 0x05	; 5
 594:	8d 2f       	mov	r24, r29
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	1f 91       	pop	r17
 59c:	0f 91       	pop	r16
 59e:	ff 90       	pop	r15
 5a0:	08 95       	ret

000005a2 <__vector_13>:
	



ISR(USART_RXC_INT)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	

	if(gl_recieve_index < gl_recieve_size)
 5c4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <gl_recieve_index>
 5c8:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gl_recieve_size>
 5cc:	89 17       	cp	r24, r25
 5ce:	48 f4       	brcc	.+18     	; 0x5e2 <__vector_13+0x40>
	{
		gl_recieve_arr[gl_recieve_index] = UDR ;
 5d0:	e8 2f       	mov	r30, r24
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	2c b1       	in	r18, 0x0c	; 12
 5d6:	ed 57       	subi	r30, 0x7D	; 125
 5d8:	fe 4f       	sbci	r31, 0xFE	; 254
 5da:	20 83       	st	Z, r18
		gl_recieve_index++;
 5dc:	8f 5f       	subi	r24, 0xFF	; 255
 5de:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <gl_recieve_index>
	}
	 
	if(gl_recieve_index == gl_recieve_size)
 5e2:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <gl_recieve_index>
 5e6:	98 13       	cpse	r25, r24
 5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <__vector_13+0x56>
	{
		 gl_recieve_index = 0;
 5ea:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <gl_recieve_index>
		 ptr_USART_recieve();
 5ee:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <ptr_USART_recieve>
 5f2:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <ptr_USART_recieve+0x1>
 5f6:	09 95       	icall
		
	} 

	
}
 5f8:	ff 91       	pop	r31
 5fa:	ef 91       	pop	r30
 5fc:	bf 91       	pop	r27
 5fe:	af 91       	pop	r26
 600:	9f 91       	pop	r25
 602:	8f 91       	pop	r24
 604:	7f 91       	pop	r23
 606:	6f 91       	pop	r22
 608:	5f 91       	pop	r21
 60a:	4f 91       	pop	r20
 60c:	3f 91       	pop	r19
 60e:	2f 91       	pop	r18
 610:	0f 90       	pop	r0
 612:	0f be       	out	0x3f, r0	; 63
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <__vector_15>:
	
ISR(USART_TXC_INT)
{
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	0f b6       	in	r0, 0x3f	; 63
 620:	0f 92       	push	r0
 622:	11 24       	eor	r1, r1
 624:	2f 93       	push	r18
 626:	3f 93       	push	r19
 628:	4f 93       	push	r20
 62a:	5f 93       	push	r21
 62c:	6f 93       	push	r22
 62e:	7f 93       	push	r23
 630:	8f 93       	push	r24
 632:	9f 93       	push	r25
 634:	af 93       	push	r26
 636:	bf 93       	push	r27
 638:	ef 93       	push	r30
 63a:	ff 93       	push	r31
	if (truncate_queue()==QUEUE_EMPTY)
 63c:	0e 94 ba 01 	call	0x374	; 0x374 <truncate_queue>
 640:	84 30       	cpi	r24, 0x04	; 4
 642:	29 f4       	brne	.+10     	; 0x64e <__vector_15+0x34>
	{
		ptr_USART_send();
 644:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <ptr_USART_send>
 648:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <ptr_USART_send+0x1>
 64c:	09 95       	icall
	}

 64e:	ff 91       	pop	r31
 650:	ef 91       	pop	r30
 652:	bf 91       	pop	r27
 654:	af 91       	pop	r26
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	7f 91       	pop	r23
 65c:	6f 91       	pop	r22
 65e:	5f 91       	pop	r21
 660:	4f 91       	pop	r20
 662:	3f 91       	pop	r19
 664:	2f 91       	pop	r18
 666:	0f 90       	pop	r0
 668:	0f be       	out	0x3f, r0	; 63
 66a:	0f 90       	pop	r0
 66c:	1f 90       	pop	r1
 66e:	18 95       	reti

00000670 <bcm_send_done>:
		  {
			  enu_bcm_status_return = CHANNEL_ERROR;
		  }	
		}
		return enu_bcm_status_return;
}
 670:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <gl_bcm_send_done>
 674:	8f 5f       	subi	r24, 0xFF	; 255
 676:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <gl_bcm_send_done>
 67a:	08 95       	ret

0000067c <bcm_recieve_done>:
 67c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <gl_bcm_recieve_done>
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <gl_bcm_recieve_done>
 686:	08 95       	ret

00000688 <bcm_init>:
 688:	0f 93       	push	r16
 68a:	1f 93       	push	r17
 68c:	cf 93       	push	r28
 68e:	00 97       	sbiw	r24, 0x00	; 0
 690:	99 f1       	breq	.+102    	; 0x6f8 <bcm_init+0x70>
 692:	c0 e0       	ldi	r28, 0x00	; 0
 694:	2b c0       	rjmp	.+86     	; 0x6ec <bcm_init+0x64>
 696:	dc 01       	movw	r26, r24
 698:	11 96       	adiw	r26, 0x01	; 1
 69a:	6c 91       	ld	r22, X
 69c:	4c 2f       	mov	r20, r28
 69e:	50 e0       	ldi	r21, 0x00	; 0
 6a0:	fa 01       	movw	r30, r20
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	9a 01       	movw	r18, r20
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	22 0f       	add	r18, r18
 6b2:	33 1f       	adc	r19, r19
 6b4:	e2 0f       	add	r30, r18
 6b6:	f3 1f       	adc	r31, r19
 6b8:	e1 5a       	subi	r30, 0xA1	; 161
 6ba:	fe 4f       	sbci	r31, 0xFE	; 254
 6bc:	21 81       	ldd	r18, Z+1	; 0x01
 6be:	62 13       	cpse	r22, r18
 6c0:	14 c0       	rjmp	.+40     	; 0x6ea <bcm_init+0x62>
 6c2:	8f 01       	movw	r16, r30
 6c4:	02 80       	ldd	r0, Z+2	; 0x02
 6c6:	f3 81       	ldd	r31, Z+3	; 0x03
 6c8:	e0 2d       	mov	r30, r0
 6ca:	86 2f       	mov	r24, r22
 6cc:	09 95       	icall
 6ce:	f8 01       	movw	r30, r16
 6d0:	00 85       	ldd	r16, Z+8	; 0x08
 6d2:	11 85       	ldd	r17, Z+9	; 0x09
 6d4:	68 e3       	ldi	r22, 0x38	; 56
 6d6:	73 e0       	ldi	r23, 0x03	; 3
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	f8 01       	movw	r30, r16
 6dc:	09 95       	icall
 6de:	6e e3       	ldi	r22, 0x3E	; 62
 6e0:	73 e0       	ldi	r23, 0x03	; 3
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	f8 01       	movw	r30, r16
 6e6:	09 95       	icall
 6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <bcm_init+0x68>
 6ea:	cf 5f       	subi	r28, 0xFF	; 255
 6ec:	c2 30       	cpi	r28, 0x02	; 2
 6ee:	98 f2       	brcs	.-90     	; 0x696 <bcm_init+0xe>
 6f0:	c2 30       	cpi	r28, 0x02	; 2
 6f2:	21 f0       	breq	.+8      	; 0x6fc <bcm_init+0x74>
 6f4:	80 e0       	ldi	r24, 0x00	; 0
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <bcm_init+0x76>
 6f8:	82 e0       	ldi	r24, 0x02	; 2
 6fa:	01 c0       	rjmp	.+2      	; 0x6fe <bcm_init+0x76>
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	cf 91       	pop	r28
 700:	1f 91       	pop	r17
 702:	0f 91       	pop	r16
 704:	08 95       	ret

00000706 <bcm_send_n>:

enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	8c 01       	movw	r16, r24
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 70e:	c0 e0       	ldi	r28, 0x00	; 0
 710:	1d c0       	rjmp	.+58     	; 0x74c <bcm_send_n+0x46>
	{
		if(ptr_str_bcm_instance->en_bcm_channel == str_bcm_instance[uint8_loc_counter].en_bcm_channel)
 712:	f8 01       	movw	r30, r16
 714:	51 81       	ldd	r21, Z+1	; 0x01
 716:	ac 2f       	mov	r26, r28
 718:	b0 e0       	ldi	r27, 0x00	; 0
 71a:	fd 01       	movw	r30, r26
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	9d 01       	movw	r18, r26
 722:	22 0f       	add	r18, r18
 724:	33 1f       	adc	r19, r19
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	22 0f       	add	r18, r18
 72c:	33 1f       	adc	r19, r19
 72e:	e2 0f       	add	r30, r18
 730:	f3 1f       	adc	r31, r19
 732:	e1 5a       	subi	r30, 0xA1	; 161
 734:	fe 4f       	sbci	r31, 0xFE	; 254
 736:	91 81       	ldd	r25, Z+1	; 0x01
 738:	59 13       	cpse	r21, r25
 73a:	07 c0       	rjmp	.+14     	; 0x74a <bcm_send_n+0x44>
 73c:	cb 01       	movw	r24, r22
		{
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
 73e:	06 80       	ldd	r0, Z+6	; 0x06
 740:	f7 81       	ldd	r31, Z+7	; 0x07
 742:	e0 2d       	mov	r30, r0
 744:	64 2f       	mov	r22, r20
 746:	09 95       	icall
			break;
 748:	03 c0       	rjmp	.+6      	; 0x750 <bcm_send_n+0x4a>

enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 74a:	cf 5f       	subi	r28, 0xFF	; 255
 74c:	c2 30       	cpi	r28, 0x02	; 2
 74e:	08 f3       	brcs	.-62     	; 0x712 <bcm_send_n+0xc>
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
			break;
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
 750:	c2 30       	cpi	r28, 0x02	; 2
 752:	11 f0       	breq	.+4      	; 0x758 <bcm_send_n+0x52>
		return enu_bcm_status_return;
}

enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	01 c0       	rjmp	.+2      	; 0x75a <bcm_send_n+0x54>
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
	{
		enu_bcm_status_return = CHANNEL_ERROR;
 758:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_bcm_status_return;

}
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	08 95       	ret

00000762 <bcm_dispatcher>:

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
 762:	89 2b       	or	r24, r25
 764:	81 f0       	breq	.+32     	; 0x786 <bcm_dispatcher+0x24>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
 766:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <gl_bcm_send_done>
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	21 f4       	brne	.+8      	; 0x776 <bcm_dispatcher+0x14>
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
		gl_bcm_send_done = 0;
 76e:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <gl_bcm_send_done>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
 772:	83 e0       	ldi	r24, 0x03	; 3
 774:	08 95       	ret
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
 776:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <gl_bcm_recieve_done>
 77a:	81 30       	cpi	r24, 0x01	; 1
 77c:	31 f4       	brne	.+12     	; 0x78a <bcm_dispatcher+0x28>
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
 77e:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <gl_bcm_recieve_done>
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
 782:	84 e0       	ldi	r24, 0x04	; 4
 784:	08 95       	ret
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
	{
		 enu_bcm_status_return = NULL_POINTER;
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	08 95       	ret

}

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 78a:	80 e0       	ldi	r24, 0x00	; 0
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
	}
	
	return enu_bcm_status_return;
}
 78c:	08 95       	ret

0000078e <strcmp>:
 78e:	fb 01       	movw	r30, r22
 790:	dc 01       	movw	r26, r24
 792:	8d 91       	ld	r24, X+
 794:	01 90       	ld	r0, Z+
 796:	80 19       	sub	r24, r0
 798:	01 10       	cpse	r0, r1
 79a:	d9 f3       	breq	.-10     	; 0x792 <strcmp+0x4>
 79c:	99 0b       	sbc	r25, r25
 79e:	08 95       	ret

000007a0 <_exit>:
 7a0:	f8 94       	cli

000007a2 <__stop_program>:
 7a2:	ff cf       	rjmp	.-2      	; 0x7a2 <__stop_program>
