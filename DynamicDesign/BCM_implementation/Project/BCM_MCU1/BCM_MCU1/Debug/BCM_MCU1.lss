
BCM_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000027e  00800060  000007c8  0000085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000de  008002de  008002de  00000ada  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ada  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020b7  00000000  00000000  00000cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdd  00000000  00000000  00002da7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001134  00000000  00000000  00003a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00004bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dac  00000000  00000000  00004edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e7  00000000  00000000  00005c88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  0000706f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 23 03 	jmp	0x646	; 0x646 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 3d       	cpi	r26, 0xDE	; 222
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	ae ed       	ldi	r26, 0xDE	; 222
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3b       	cpi	r26, 0xBC	; 188
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

// variable return for bcm
enu_bcm_status_t gl_enu_bcm_status_return = BCM_OKAY;
void app_init(void)
{
	LED_init(&gl_error_led);
  92:	80 ef       	ldi	r24, 0xF0	; 240
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
	// init leds and check on their return
	
	if( (LED_init(&gl_str_send_complete_led) != LED_OK) || (LED_init(&gl_str_recieve_complete_led) != LED_OK))
  9a:	8a ee       	ldi	r24, 0xEA	; 234
  9c:	92 e0       	ldi	r25, 0x02	; 2
  9e:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
  a2:	81 11       	cpse	r24, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <app_init+0x20>
  a6:	82 ef       	ldi	r24, 0xF2	; 242
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <app_init+0x26>
	{
		gl_enu_app_state = BLOCKED;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
	}
	
	
	
	gl_enu_bcm_status_return = bcm_init(&gl_str_bcm_instance_app);
  b8:	8f ed       	ldi	r24, 0xDF	; 223
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	0e 94 56 03 	call	0x6ac	; 0x6ac <bcm_init>
  c0:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
	if((gl_enu_bcm_status_return == BCM_OKAY) && (gl_enu_app_state != BLOCKED))
  c4:	81 11       	cpse	r24, r1
  c6:	1a c0       	rjmp	.+52     	; 0xfc <app_init+0x6a>
  c8:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <gl_enu_app_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	b1 f0       	breq	.+44     	; 0xfc <app_init+0x6a>
	{
		gl_enu_bcm_status_return = bcm_send_n(&gl_str_bcm_instance_app,gl_send_string_to_dest,strlen(gl_send_string_to_dest));
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	01 90       	ld	r0, Z+
  d6:	00 20       	and	r0, r0
  d8:	e9 f7       	brne	.-6      	; 0xd4 <app_init+0x42>
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	af 01       	movw	r20, r30
  de:	40 56       	subi	r20, 0x60	; 96
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	60 e6       	ldi	r22, 0x60	; 96
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	8f ed       	ldi	r24, 0xDF	; 223
  e8:	92 e0       	ldi	r25, 0x02	; 2
  ea:	0e 94 95 03 	call	0x72a	; 0x72a <bcm_send_n>
  ee:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
		if(gl_enu_bcm_status_return != BCM_OKAY)
  f2:	88 23       	and	r24, r24
  f4:	19 f0       	breq	.+6      	; 0xfc <app_init+0x6a>
		{
			gl_enu_app_state = BLOCKED;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
  fc:	08 95       	ret

000000fe <app_start>:
	
}

void app_start(void)
{
	switch(gl_enu_app_state)
  fe:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <gl_enu_app_state>
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <app_start+0xe>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	19 f1       	breq	.+70     	; 0x150 <app_start+0x52>
 10a:	08 95       	ret
	{
		case IDLE :
		{
			gl_enu_bcm_status_return = bcm_dispatcher(&gl_str_bcm_instance_app);
 10c:	8f ed       	ldi	r24, 0xDF	; 223
 10e:	92 e0       	ldi	r25, 0x02	; 2
 110:	0e 94 c3 03 	call	0x786	; 0x786 <bcm_dispatcher>
 114:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <__data_end>
			if(gl_enu_bcm_status_return == SEND_OPERATION_DONE)
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f4       	brne	.+10     	; 0x126 <app_start+0x28>
			{
				LED_toggle(&gl_str_send_complete_led);
 11c:	8a ee       	ldi	r24, 0xEA	; 234
 11e:	92 e0       	ldi	r25, 0x02	; 2
 120:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 124:	08 95       	ret
			}
			else if(gl_enu_bcm_status_return == REC_OPERATION_DONE)
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	69 f4       	brne	.+26     	; 0x144 <app_start+0x46>
			{
				if(!strcmp(gl_rec_string_from_dest,gl_recieve_arr))
 12a:	6e ee       	ldi	r22, 0xEE	; 238
 12c:	72 e0       	ldi	r23, 0x02	; 2
 12e:	88 e2       	ldi	r24, 0x28	; 40
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <strcmp>
 136:	89 2b       	or	r24, r25
 138:	79 f4       	brne	.+30     	; 0x158 <app_start+0x5a>
				{
					LED_toggle(&gl_str_recieve_complete_led);
 13a:	82 ef       	ldi	r24, 0xF2	; 242
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 142:	08 95       	ret
				}
				
			}
			
			else if(gl_enu_bcm_status_return == NULL_POINTER)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	41 f4       	brne	.+16     	; 0x158 <app_start+0x5a>
			{
				gl_enu_app_state = BLOCKED;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <gl_enu_app_state>
 14e:	08 95       	ret
			break;
		}
		
		case BLOCKED :
		{
			LED_toggle(&gl_error_led);
 150:	80 ef       	ldi	r24, 0xF0	; 240
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 158:	08 95       	ret

0000015a <LED_init>:
	else return LED_NOT_OK;
}
enu_led_error_t LED_off(str_led_config_t *str_ptr_led_config){
	if(!DIO_write(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber,LOW))return LED_OK;
	else return LED_NOT_OK;
}
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	61 81       	ldd	r22, Z+1	; 0x01
 160:	80 81       	ld	r24, Z
 162:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
 166:	81 11       	cpse	r24, r1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret

0000016c <LED_toggle>:
enu_led_error_t LED_toggle(str_led_config_t *str_ptr_led_config){
	if(!DIO_toggle(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber))return LED_OK;
 16c:	fc 01       	movw	r30, r24
 16e:	61 81       	ldd	r22, Z+1	; 0x01
 170:	80 81       	ld	r24, Z
 172:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_toggle>
 176:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
}
 17a:	08 95       	ret

0000017c <main>:
#include "App/app.h"


int main(void)
{
   app_init();
 17c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 180:	0e 94 7f 00 	call	0xfe	; 0xfe <app_start>
 184:	fd cf       	rjmp	.-6      	; 0x180 <main+0x4>

00000186 <DIO_init>:
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_init+0x6>
 18a:	90 c0       	rjmp	.+288    	; 0x2ac <DIO_init+0x126>
 18c:	61 30       	cpi	r22, 0x01	; 1
 18e:	51 f1       	breq	.+84     	; 0x1e4 <DIO_init+0x5e>
 190:	38 f0       	brcs	.+14     	; 0x1a0 <DIO_init+0x1a>
 192:	62 30       	cpi	r22, 0x02	; 2
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_init+0x12>
 196:	48 c0       	rjmp	.+144    	; 0x228 <DIO_init+0xa2>
 198:	63 30       	cpi	r22, 0x03	; 3
 19a:	09 f4       	brne	.+2      	; 0x19e <DIO_init+0x18>
 19c:	66 c0       	rjmp	.+204    	; 0x26a <DIO_init+0xe4>
 19e:	88 c0       	rjmp	.+272    	; 0x2b0 <DIO_init+0x12a>
 1a0:	41 11       	cpse	r20, r1
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <DIO_init+0x3c>
 1a4:	4a b3       	in	r20, 0x1a	; 26
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_init+0x2c>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_init+0x28>
 1b6:	cb 01       	movw	r24, r22
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_init+0x42>
 1c6:	76 c0       	rjmp	.+236    	; 0x2b4 <DIO_init+0x12e>
 1c8:	4a b3       	in	r20, 0x1a	; 26
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x50>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_init+0x4c>
 1da:	cb 01       	movw	r24, r22
 1dc:	84 2b       	or	r24, r20
 1de:	8a bb       	out	0x1a, r24	; 26
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	41 11       	cpse	r20, r1
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <DIO_init+0x80>
 1e8:	47 b3       	in	r20, 0x17	; 23
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_init+0x70>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_init+0x6c>
 1fa:	cb 01       	movw	r24, r22
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	87 bb       	out	0x17, r24	; 23
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	09 f0       	breq	.+2      	; 0x20c <DIO_init+0x86>
 20a:	56 c0       	rjmp	.+172    	; 0x2b8 <DIO_init+0x132>
 20c:	47 b3       	in	r20, 0x17	; 23
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_init+0x94>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_init+0x90>
 21e:	cb 01       	movw	r24, r22
 220:	84 2b       	or	r24, r20
 222:	87 bb       	out	0x17, r24	; 23
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	0f c0       	rjmp	.+30     	; 0x24a <DIO_init+0xc4>
 22c:	44 b3       	in	r20, 0x14	; 20
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_init+0xb4>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_init+0xb0>
 23e:	cb 01       	movw	r24, r22
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	84 bb       	out	0x14, r24	; 20
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	b9 f5       	brne	.+110    	; 0x2bc <DIO_init+0x136>
 24e:	44 b3       	in	r20, 0x14	; 20
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0xd6>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0xd2>
 260:	cb 01       	movw	r24, r22
 262:	84 2b       	or	r24, r20
 264:	84 bb       	out	0x14, r24	; 20
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	41 11       	cpse	r20, r1
 26c:	0f c0       	rjmp	.+30     	; 0x28c <DIO_init+0x106>
 26e:	41 b3       	in	r20, 0x11	; 17
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_init+0xf6>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_init+0xf2>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	81 bb       	out	0x11, r24	; 17
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	c1 f4       	brne	.+48     	; 0x2c0 <DIO_init+0x13a>
 290:	41 b3       	in	r20, 0x11	; 17
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_init+0x118>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_init+0x114>
 2a2:	cb 01       	movw	r24, r22
 2a4:	84 2b       	or	r24, r20
 2a6:	81 bb       	out	0x11, r24	; 17
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret

000002c4 <DIO_toggle>:
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <DIO_toggle+0x6>
 2c8:	40 c0       	rjmp	.+128    	; 0x34a <DIO_toggle+0x86>
	switch(portNumber){
 2ca:	61 30       	cpi	r22, 0x01	; 1
 2cc:	a1 f0       	breq	.+40     	; 0x2f6 <DIO_toggle+0x32>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_toggle+0x16>
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	f9 f0       	breq	.+62     	; 0x312 <DIO_toggle+0x4e>
 2d4:	63 30       	cpi	r22, 0x03	; 3
 2d6:	59 f1       	breq	.+86     	; 0x32e <DIO_toggle+0x6a>
 2d8:	3a c0       	rjmp	.+116    	; 0x34e <DIO_toggle+0x8a>
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
 2da:	4b b3       	in	r20, 0x1b	; 27
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_toggle+0x24>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_toggle+0x20>
 2ec:	cb 01       	movw	r24, r22
 2ee:	84 27       	eor	r24, r20
 2f0:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
 2f4:	08 95       	ret
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
 2f6:	48 b3       	in	r20, 0x18	; 24
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_toggle+0x40>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_toggle+0x3c>
 308:	cb 01       	movw	r24, r22
 30a:	84 27       	eor	r24, r20
 30c:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
 310:	08 95       	ret
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
 312:	45 b3       	in	r20, 0x15	; 21
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_toggle+0x5c>
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_toggle+0x58>
 324:	cb 01       	movw	r24, r22
 326:	84 27       	eor	r24, r20
 328:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
 32c:	08 95       	ret
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
 32e:	42 b3       	in	r20, 0x12	; 18
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_toggle+0x78>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_toggle+0x74>
 340:	cb 01       	movw	r24, r22
 342:	84 27       	eor	r24, r20
 344:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 346:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
 348:	08 95       	ret
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 34e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return DIO_OK;
}
 350:	08 95       	ret

00000352 <insert_queue>:
		USART_recieve_byte(&uint8_arg_arr_bytes[uint8_loc_counter]);
		uint8_loc_counter++;
	}
	
	return STATUS_OK;
}
 352:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 356:	99 23       	and	r25, r25
 358:	14 f4       	brge	.+4      	; 0x35e <insert_queue+0xc>
 35a:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 35e:	ad eb       	ldi	r26, 0xBD	; 189
 360:	b2 e0       	ldi	r27, 0x02	; 2
 362:	ec 91       	ld	r30, X
 364:	ef 5f       	subi	r30, 0xFF	; 255
 366:	ec 93       	st	X, r30
 368:	0e 2e       	mov	r0, r30
 36a:	00 0c       	add	r0, r0
 36c:	ff 0b       	sbc	r31, r31
 36e:	ec 50       	subi	r30, 0x0C	; 12
 370:	fe 4f       	sbci	r31, 0xFE	; 254
 372:	80 83       	st	Z, r24
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret

00000378 <truncate_queue>:
 378:	e0 91 bc 02 	lds	r30, 0x02BC	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 37c:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <str_gl_usart_tasks_queue+0xc9>
 380:	8e 17       	cp	r24, r30
 382:	14 f0       	brlt	.+4      	; 0x388 <truncate_queue+0x10>
 384:	ef 3f       	cpi	r30, 0xFF	; 255
 386:	39 f4       	brne	.+14     	; 0x396 <truncate_queue+0x1e>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <str_gl_usart_tasks_queue+0xc8>
 38e:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <str_gl_usart_tasks_queue+0xc9>
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	08 95       	ret
 396:	0e 2e       	mov	r0, r30
 398:	00 0c       	add	r0, r0
 39a:	ff 0b       	sbc	r31, r31
 39c:	ec 50       	subi	r30, 0x0C	; 12
 39e:	fe 4f       	sbci	r31, 0xFE	; 254
 3a0:	80 81       	ld	r24, Z
 3a2:	8c b9       	out	0x0c, r24	; 12
 3a4:	ec eb       	ldi	r30, 0xBC	; 188
 3a6:	f2 e0       	ldi	r31, 0x02	; 2
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 83       	st	Z, r24
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <USART_setCallBack>:
 3b2:	61 15       	cp	r22, r1
 3b4:	71 05       	cpc	r23, r1
 3b6:	89 f0       	breq	.+34     	; 0x3da <USART_setCallBack+0x28>
 3b8:	88 23       	and	r24, r24
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <USART_setCallBack+0x10>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	39 f0       	breq	.+14     	; 0x3ce <USART_setCallBack+0x1c>
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <USART_setCallBack+0x2c>
 3c2:	70 93 b9 03 	sts	0x03B9, r23	; 0x8003b9 <ptr_USART_send+0x1>
 3c6:	60 93 b8 03 	sts	0x03B8, r22	; 0x8003b8 <ptr_USART_send>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	70 93 b7 03 	sts	0x03B7, r23	; 0x8003b7 <ptr_USART_recieve+0x1>
 3d2:	60 93 b6 03 	sts	0x03B6, r22	; 0x8003b6 <ptr_USART_recieve>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	08 95       	ret
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	08 95       	ret

000003e2 <USART_init>:
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	19 c0       	rjmp	.+50     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e2 0f       	add	r30, r18
 3f2:	f3 1f       	adc	r31, r19
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	e2 54       	subi	r30, 0x42	; 66
 3fa:	fd 4f       	sbci	r31, 0xFD	; 253
 3fc:	90 81       	ld	r25, Z
 3fe:	89 13       	cpse	r24, r25
 400:	0a c0       	rjmp	.+20     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 402:	f9 01       	movw	r30, r18
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	e2 54       	subi	r30, 0x42	; 66
 412:	fd 4f       	sbci	r31, 0xFD	; 253
 414:	05 c0       	rjmp	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	28 f3       	brcs	.-54     	; 0x3e6 <USART_init+0x4>
 41c:	e0 e0       	ldi	r30, 0x00	; 0
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	92 c0       	rjmp	.+292    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 426:	80 b5       	in	r24, 0x20	; 32
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	80 bd       	out	0x20, r24	; 32
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	99 23       	and	r25, r25
 430:	19 f0       	breq	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 432:	91 30       	cpi	r25, 0x01	; 1
 434:	29 f0       	breq	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 436:	08 c0       	rjmp	.+16     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 438:	8f 7b       	andi	r24, 0xBF	; 191
 43a:	80 bd       	out	0x20, r24	; 32
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 bd       	out	0x20, r24	; 32
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	01 c0       	rjmp	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	81 11       	cpse	r24, r1
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 44e:	92 81       	ldd	r25, Z+2	; 0x02
 450:	91 30       	cpi	r25, 0x01	; 1
 452:	49 f0       	breq	.+18     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 454:	18 f0       	brcs	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 456:	92 30       	cpi	r25, 0x02	; 2
 458:	59 f0       	breq	.+22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45c:	9a b1       	in	r25, 0x0a	; 10
 45e:	9f 7e       	andi	r25, 0xEF	; 239
 460:	98 60       	ori	r25, 0x08	; 8
 462:	9a b9       	out	0x0a, r25	; 10
 464:	0a c0       	rjmp	.+20     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 466:	9a b1       	in	r25, 0x0a	; 10
 468:	90 61       	ori	r25, 0x10	; 16
 46a:	97 7f       	andi	r25, 0xF7	; 247
 46c:	9a b9       	out	0x0a, r25	; 10
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 470:	9a b1       	in	r25, 0x0a	; 10
 472:	98 61       	ori	r25, 0x18	; 24
 474:	9a b9       	out	0x0a, r25	; 10
 476:	01 c0       	rjmp	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	81 11       	cpse	r24, r1
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 47e:	93 81       	ldd	r25, Z+3	; 0x03
 480:	91 30       	cpi	r25, 0x01	; 1
 482:	41 f0       	breq	.+16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 484:	58 f0       	brcs	.+22     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 486:	92 30       	cpi	r25, 0x02	; 2
 488:	69 f4       	brne	.+26     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 48a:	90 b5       	in	r25, 0x20	; 32
 48c:	9f 7e       	andi	r25, 0xEF	; 239
 48e:	90 62       	ori	r25, 0x20	; 32
 490:	90 bd       	out	0x20, r25	; 32
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 494:	90 b5       	in	r25, 0x20	; 32
 496:	90 63       	ori	r25, 0x30	; 48
 498:	90 bd       	out	0x20, r25	; 32
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 49c:	90 b5       	in	r25, 0x20	; 32
 49e:	9f 7c       	andi	r25, 0xCF	; 207
 4a0:	90 bd       	out	0x20, r25	; 32
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	81 11       	cpse	r24, r1
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4aa:	94 81       	ldd	r25, Z+4	; 0x04
 4ac:	99 23       	and	r25, r25
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b0:	91 30       	cpi	r25, 0x01	; 1
 4b2:	29 f0       	breq	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4b6:	90 b5       	in	r25, 0x20	; 32
 4b8:	97 7f       	andi	r25, 0xF7	; 247
 4ba:	90 bd       	out	0x20, r25	; 32
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4be:	90 b5       	in	r25, 0x20	; 32
 4c0:	98 60       	ori	r25, 0x08	; 8
 4c2:	90 bd       	out	0x20, r25	; 32
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	81 11       	cpse	r24, r1
 4ca:	34 c0       	rjmp	.+104    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4cc:	95 81       	ldd	r25, Z+5	; 0x05
 4ce:	92 30       	cpi	r25, 0x02	; 2
 4d0:	d1 f0       	breq	.+52     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4d2:	28 f4       	brcc	.+10     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4d4:	99 23       	and	r25, r25
 4d6:	41 f0       	breq	.+16     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4d8:	91 30       	cpi	r25, 0x01	; 1
 4da:	69 f0       	breq	.+26     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4dc:	2a c0       	rjmp	.+84     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4de:	93 30       	cpi	r25, 0x03	; 3
 4e0:	d1 f0       	breq	.+52     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 4e2:	94 30       	cpi	r25, 0x04	; 4
 4e4:	f9 f0       	breq	.+62     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 4e6:	25 c0       	rjmp	.+74     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4e8:	90 b5       	in	r25, 0x20	; 32
 4ea:	99 7f       	andi	r25, 0xF9	; 249
 4ec:	90 bd       	out	0x20, r25	; 32
 4ee:	9a b1       	in	r25, 0x0a	; 10
 4f0:	9b 7f       	andi	r25, 0xFB	; 251
 4f2:	9a b9       	out	0x0a, r25	; 10
 4f4:	1f c0       	rjmp	.+62     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4f6:	90 b5       	in	r25, 0x20	; 32
 4f8:	92 60       	ori	r25, 0x02	; 2
 4fa:	9b 7f       	andi	r25, 0xFB	; 251
 4fc:	90 bd       	out	0x20, r25	; 32
 4fe:	9a b1       	in	r25, 0x0a	; 10
 500:	9b 7f       	andi	r25, 0xFB	; 251
 502:	9a b9       	out	0x0a, r25	; 10
 504:	17 c0       	rjmp	.+46     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 506:	90 b5       	in	r25, 0x20	; 32
 508:	9d 7f       	andi	r25, 0xFD	; 253
 50a:	94 60       	ori	r25, 0x04	; 4
 50c:	90 bd       	out	0x20, r25	; 32
 50e:	9a b1       	in	r25, 0x0a	; 10
 510:	9b 7f       	andi	r25, 0xFB	; 251
 512:	9a b9       	out	0x0a, r25	; 10
 514:	0f c0       	rjmp	.+30     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 516:	90 b5       	in	r25, 0x20	; 32
 518:	96 60       	ori	r25, 0x06	; 6
 51a:	90 bd       	out	0x20, r25	; 32
 51c:	9a b1       	in	r25, 0x0a	; 10
 51e:	9b 7f       	andi	r25, 0xFB	; 251
 520:	9a b9       	out	0x0a, r25	; 10
 522:	08 c0       	rjmp	.+16     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 524:	90 b5       	in	r25, 0x20	; 32
 526:	96 60       	ori	r25, 0x06	; 6
 528:	90 bd       	out	0x20, r25	; 32
 52a:	9a b1       	in	r25, 0x0a	; 10
 52c:	94 60       	ori	r25, 0x04	; 4
 52e:	9a b9       	out	0x0a, r25	; 10
 530:	01 c0       	rjmp	.+2      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	9a b1       	in	r25, 0x0a	; 10
 536:	90 6c       	ori	r25, 0xC0	; 192
 538:	9a b9       	out	0x0a, r25	; 10
 53a:	78 94       	sei
 53c:	9b b1       	in	r25, 0x0b	; 11
 53e:	9d 7f       	andi	r25, 0xFD	; 253
 540:	9b b9       	out	0x0b, r25	; 11
 542:	93 e3       	ldi	r25, 0x33	; 51
 544:	99 b9       	out	0x09, r25	; 9
 546:	10 bc       	out	0x20, r1	; 32
 548:	08 95       	ret
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret

0000054e <USART_send_byte>:
 54e:	cf 93       	push	r28
 550:	0e 94 a9 01 	call	0x352	; 0x352 <insert_queue>
 554:	c8 2f       	mov	r28, r24
 556:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 55a:	8c 2f       	mov	r24, r28
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <USART_send_n_bytes>:
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	b9 f0       	breq	.+46     	; 0x59c <USART_send_n_bytes+0x3c>
 56e:	f6 2e       	mov	r15, r22
 570:	8c 01       	movw	r16, r24
 572:	86 2f       	mov	r24, r22
 574:	0e 94 a9 01 	call	0x352	; 0x352 <insert_queue>
 578:	c0 e0       	ldi	r28, 0x00	; 0
 57a:	d0 e0       	ldi	r29, 0x00	; 0
 57c:	0a c0       	rjmp	.+20     	; 0x592 <USART_send_n_bytes+0x32>
 57e:	f8 01       	movw	r30, r16
 580:	ec 0f       	add	r30, r28
 582:	f1 1d       	adc	r31, r1
 584:	80 81       	ld	r24, Z
 586:	0e 94 a9 01 	call	0x352	; 0x352 <insert_queue>
 58a:	d8 2f       	mov	r29, r24
 58c:	81 11       	cpse	r24, r1
 58e:	03 c0       	rjmp	.+6      	; 0x596 <USART_send_n_bytes+0x36>
 590:	cf 5f       	subi	r28, 0xFF	; 255
 592:	cf 15       	cp	r28, r15
 594:	a0 f3       	brcs	.-24     	; 0x57e <USART_send_n_bytes+0x1e>
 596:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 59a:	01 c0       	rjmp	.+2      	; 0x59e <USART_send_n_bytes+0x3e>
 59c:	d5 e0       	ldi	r29, 0x05	; 5
 59e:	8d 2f       	mov	r24, r29
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	08 95       	ret

000005ac <__vector_13>:
	



ISR(USART_RXC_INT)
{
 5ac:	1f 92       	push	r1
 5ae:	0f 92       	push	r0
 5b0:	0f b6       	in	r0, 0x3f	; 63
 5b2:	0f 92       	push	r0
 5b4:	11 24       	eor	r1, r1
 5b6:	2f 93       	push	r18
 5b8:	3f 93       	push	r19
 5ba:	4f 93       	push	r20
 5bc:	5f 93       	push	r21
 5be:	6f 93       	push	r22
 5c0:	7f 93       	push	r23
 5c2:	8f 93       	push	r24
 5c4:	9f 93       	push	r25
 5c6:	af 93       	push	r26
 5c8:	bf 93       	push	r27
 5ca:	ef 93       	push	r30
 5cc:	ff 93       	push	r31
	
    if(gl_recieve_size == NULL)
 5ce:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <gl_recieve_size>
 5d2:	91 11       	cpse	r25, r1
 5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <__vector_13+0x3c>
	{
		// convert size to integer number
		gl_recieve_size = UDR;
 5d6:	8c b1       	in	r24, 0x0c	; 12
 5d8:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <gl_recieve_size>
		if(gl_recieve_size < '0' || gl_recieve_size > '9')
 5dc:	80 53       	subi	r24, 0x30	; 48
 5de:	8a 30       	cpi	r24, 0x0A	; 10
 5e0:	80 f4       	brcc	.+32     	; 0x602 <__vector_13+0x56>
		{
			//nothing
		}
		else
		{
			gl_recieve_size-='0';
 5e2:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <gl_recieve_size>
 5e6:	0d c0       	rjmp	.+26     	; 0x602 <__vector_13+0x56>
		}
	}
	else if(gl_recieve_index < gl_recieve_size)
 5e8:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <gl_recieve_index>
 5ec:	89 17       	cp	r24, r25
 5ee:	48 f4       	brcc	.+18     	; 0x602 <__vector_13+0x56>
	{
		gl_recieve_arr[gl_recieve_index] = UDR ;
 5f0:	e8 2f       	mov	r30, r24
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	9c b1       	in	r25, 0x0c	; 12
 5f6:	e2 51       	subi	r30, 0x12	; 18
 5f8:	fd 4f       	sbci	r31, 0xFD	; 253
 5fa:	90 83       	st	Z, r25
		gl_recieve_index++;
 5fc:	8f 5f       	subi	r24, 0xFF	; 255
 5fe:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <gl_recieve_index>
	}
	 
	if(gl_recieve_index == gl_recieve_size && gl_recieve_size != NULL)
 602:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <gl_recieve_index>
 606:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <gl_recieve_size>
 60a:	98 13       	cpse	r25, r24
 60c:	0b c0       	rjmp	.+22     	; 0x624 <__vector_13+0x78>
 60e:	88 23       	and	r24, r24
 610:	49 f0       	breq	.+18     	; 0x624 <__vector_13+0x78>
	{
		 gl_recieve_index = 0;
 612:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <gl_recieve_index>
		 gl_recieve_size = NULL;
 616:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <gl_recieve_size>
		 ptr_USART_recieve();
 61a:	e0 91 b6 03 	lds	r30, 0x03B6	; 0x8003b6 <ptr_USART_recieve>
 61e:	f0 91 b7 03 	lds	r31, 0x03B7	; 0x8003b7 <ptr_USART_recieve+0x1>
 622:	09 95       	icall
		
	} 

	
}
 624:	ff 91       	pop	r31
 626:	ef 91       	pop	r30
 628:	bf 91       	pop	r27
 62a:	af 91       	pop	r26
 62c:	9f 91       	pop	r25
 62e:	8f 91       	pop	r24
 630:	7f 91       	pop	r23
 632:	6f 91       	pop	r22
 634:	5f 91       	pop	r21
 636:	4f 91       	pop	r20
 638:	3f 91       	pop	r19
 63a:	2f 91       	pop	r18
 63c:	0f 90       	pop	r0
 63e:	0f be       	out	0x3f, r0	; 63
 640:	0f 90       	pop	r0
 642:	1f 90       	pop	r1
 644:	18 95       	reti

00000646 <__vector_15>:
	
ISR(USART_TXC_INT)
{
 646:	1f 92       	push	r1
 648:	0f 92       	push	r0
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	0f 92       	push	r0
 64e:	11 24       	eor	r1, r1
 650:	2f 93       	push	r18
 652:	3f 93       	push	r19
 654:	4f 93       	push	r20
 656:	5f 93       	push	r21
 658:	6f 93       	push	r22
 65a:	7f 93       	push	r23
 65c:	8f 93       	push	r24
 65e:	9f 93       	push	r25
 660:	af 93       	push	r26
 662:	bf 93       	push	r27
 664:	ef 93       	push	r30
 666:	ff 93       	push	r31
	if (truncate_queue()==QUEUE_EMPTY)
 668:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 66c:	84 30       	cpi	r24, 0x04	; 4
 66e:	29 f4       	brne	.+10     	; 0x67a <__vector_15+0x34>
	{
		ptr_USART_send();
 670:	e0 91 b8 03 	lds	r30, 0x03B8	; 0x8003b8 <ptr_USART_send>
 674:	f0 91 b9 03 	lds	r31, 0x03B9	; 0x8003b9 <ptr_USART_send+0x1>
 678:	09 95       	icall
	}

 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <bcm_send_done>:
		{
			enu_bcm_status_return = CHANNEL_ERROR;
		}
	}
	return enu_bcm_status_return;
}
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	80 93 bb 03 	sts	0x03BB, r24	; 0x8003bb <gl_bcm_send_done>
 6a2:	08 95       	ret

000006a4 <bcm_recieve_done>:
 6a4:	81 e0       	ldi	r24, 0x01	; 1
 6a6:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <gl_bcm_recieve_done>
 6aa:	08 95       	ret

000006ac <bcm_init>:
 6ac:	0f 93       	push	r16
 6ae:	1f 93       	push	r17
 6b0:	cf 93       	push	r28
 6b2:	00 97       	sbiw	r24, 0x00	; 0
 6b4:	99 f1       	breq	.+102    	; 0x71c <bcm_init+0x70>
 6b6:	c0 e0       	ldi	r28, 0x00	; 0
 6b8:	2b c0       	rjmp	.+86     	; 0x710 <bcm_init+0x64>
 6ba:	dc 01       	movw	r26, r24
 6bc:	11 96       	adiw	r26, 0x01	; 1
 6be:	6c 91       	ld	r22, X
 6c0:	4c 2f       	mov	r20, r28
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	fa 01       	movw	r30, r20
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	9a 01       	movw	r18, r20
 6cc:	22 0f       	add	r18, r18
 6ce:	33 1f       	adc	r19, r19
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	22 0f       	add	r18, r18
 6d6:	33 1f       	adc	r19, r19
 6d8:	e2 0f       	add	r30, r18
 6da:	f3 1f       	adc	r31, r19
 6dc:	e6 53       	subi	r30, 0x36	; 54
 6de:	fd 4f       	sbci	r31, 0xFD	; 253
 6e0:	21 81       	ldd	r18, Z+1	; 0x01
 6e2:	62 13       	cpse	r22, r18
 6e4:	14 c0       	rjmp	.+40     	; 0x70e <bcm_init+0x62>
 6e6:	8f 01       	movw	r16, r30
 6e8:	02 80       	ldd	r0, Z+2	; 0x02
 6ea:	f3 81       	ldd	r31, Z+3	; 0x03
 6ec:	e0 2d       	mov	r30, r0
 6ee:	86 2f       	mov	r24, r22
 6f0:	09 95       	icall
 6f2:	f8 01       	movw	r30, r16
 6f4:	00 85       	ldd	r16, Z+8	; 0x08
 6f6:	11 85       	ldd	r17, Z+9	; 0x09
 6f8:	6e e4       	ldi	r22, 0x4E	; 78
 6fa:	73 e0       	ldi	r23, 0x03	; 3
 6fc:	80 e0       	ldi	r24, 0x00	; 0
 6fe:	f8 01       	movw	r30, r16
 700:	09 95       	icall
 702:	62 e5       	ldi	r22, 0x52	; 82
 704:	73 e0       	ldi	r23, 0x03	; 3
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	f8 01       	movw	r30, r16
 70a:	09 95       	icall
 70c:	03 c0       	rjmp	.+6      	; 0x714 <bcm_init+0x68>
 70e:	cf 5f       	subi	r28, 0xFF	; 255
 710:	c2 30       	cpi	r28, 0x02	; 2
 712:	98 f2       	brcs	.-90     	; 0x6ba <bcm_init+0xe>
 714:	c2 30       	cpi	r28, 0x02	; 2
 716:	21 f0       	breq	.+8      	; 0x720 <bcm_init+0x74>
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	03 c0       	rjmp	.+6      	; 0x722 <bcm_init+0x76>
 71c:	82 e0       	ldi	r24, 0x02	; 2
 71e:	01 c0       	rjmp	.+2      	; 0x722 <bcm_init+0x76>
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	cf 91       	pop	r28
 724:	1f 91       	pop	r17
 726:	0f 91       	pop	r16
 728:	08 95       	ret

0000072a <bcm_send_n>:
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	8c 01       	movw	r16, r24
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 732:	c0 e0       	ldi	r28, 0x00	; 0
 734:	1d c0       	rjmp	.+58     	; 0x770 <bcm_send_n+0x46>
	{
		if(ptr_str_bcm_instance->en_bcm_channel == str_bcm_instance[uint8_loc_counter].en_bcm_channel)
 736:	f8 01       	movw	r30, r16
 738:	51 81       	ldd	r21, Z+1	; 0x01
 73a:	ac 2f       	mov	r26, r28
 73c:	b0 e0       	ldi	r27, 0x00	; 0
 73e:	fd 01       	movw	r30, r26
 740:	ee 0f       	add	r30, r30
 742:	ff 1f       	adc	r31, r31
 744:	9d 01       	movw	r18, r26
 746:	22 0f       	add	r18, r18
 748:	33 1f       	adc	r19, r19
 74a:	22 0f       	add	r18, r18
 74c:	33 1f       	adc	r19, r19
 74e:	22 0f       	add	r18, r18
 750:	33 1f       	adc	r19, r19
 752:	e2 0f       	add	r30, r18
 754:	f3 1f       	adc	r31, r19
 756:	e6 53       	subi	r30, 0x36	; 54
 758:	fd 4f       	sbci	r31, 0xFD	; 253
 75a:	91 81       	ldd	r25, Z+1	; 0x01
 75c:	59 13       	cpse	r21, r25
 75e:	07 c0       	rjmp	.+14     	; 0x76e <bcm_send_n+0x44>
 760:	cb 01       	movw	r24, r22
		{
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
 762:	06 80       	ldd	r0, Z+6	; 0x06
 764:	f7 81       	ldd	r31, Z+7	; 0x07
 766:	e0 2d       	mov	r30, r0
 768:	64 2f       	mov	r22, r20
 76a:	09 95       	icall
			break;
 76c:	03 c0       	rjmp	.+6      	; 0x774 <bcm_send_n+0x4a>
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 76e:	cf 5f       	subi	r28, 0xFF	; 255
 770:	c2 30       	cpi	r28, 0x02	; 2
 772:	08 f3       	brcs	.-62     	; 0x736 <bcm_send_n+0xc>
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
			break;
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
 774:	c2 30       	cpi	r28, 0x02	; 2
 776:	11 f0       	breq	.+4      	; 0x77c <bcm_send_n+0x52>
	}
	return enu_bcm_status_return;
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 778:	80 e0       	ldi	r24, 0x00	; 0
 77a:	01 c0       	rjmp	.+2      	; 0x77e <bcm_send_n+0x54>
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
	{
		enu_bcm_status_return = CHANNEL_ERROR;
 77c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_bcm_status_return;

}
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <bcm_dispatcher>:

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
 786:	89 2b       	or	r24, r25
 788:	81 f0       	breq	.+32     	; 0x7aa <bcm_dispatcher+0x24>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
 78a:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <gl_bcm_send_done>
 78e:	81 30       	cpi	r24, 0x01	; 1
 790:	21 f4       	brne	.+8      	; 0x79a <bcm_dispatcher+0x14>
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
		gl_bcm_send_done = 0;
 792:	10 92 bb 03 	sts	0x03BB, r1	; 0x8003bb <gl_bcm_send_done>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	08 95       	ret
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
 79a:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <gl_bcm_recieve_done>
 79e:	81 30       	cpi	r24, 0x01	; 1
 7a0:	31 f4       	brne	.+12     	; 0x7ae <bcm_dispatcher+0x28>
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
 7a2:	10 92 ba 03 	sts	0x03BA, r1	; 0x8003ba <gl_bcm_recieve_done>
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
 7a6:	84 e0       	ldi	r24, 0x04	; 4
 7a8:	08 95       	ret
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
	{
		 enu_bcm_status_return = NULL_POINTER;
 7aa:	82 e0       	ldi	r24, 0x02	; 2
 7ac:	08 95       	ret

}

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 7ae:	80 e0       	ldi	r24, 0x00	; 0
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
	}
	
	return enu_bcm_status_return;
}
 7b0:	08 95       	ret

000007b2 <strcmp>:
 7b2:	fb 01       	movw	r30, r22
 7b4:	dc 01       	movw	r26, r24
 7b6:	8d 91       	ld	r24, X+
 7b8:	01 90       	ld	r0, Z+
 7ba:	80 19       	sub	r24, r0
 7bc:	01 10       	cpse	r0, r1
 7be:	d9 f3       	breq	.-10     	; 0x7b6 <strcmp+0x4>
 7c0:	99 0b       	sbc	r25, r25
 7c2:	08 95       	ret

000007c4 <_exit>:
 7c4:	f8 94       	cli

000007c6 <__stop_program>:
 7c6:	ff cf       	rjmp	.-2      	; 0x7c6 <__stop_program>
