
BCM_MCU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  000007a0  00000834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000dd  00800174  00800174  00000948  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000978  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020ac  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cdd  00000000  00000000  00002c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000010e8  00000000  00000000  000038e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000049d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d58  00000000  00000000  00004cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e7  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006e33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 0f 03 	jmp	0x61e	; 0x61e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ea       	ldi	r30, 0xA0	; 160
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 35       	cpi	r26, 0x51	; 81
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  8a:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

// variable return for bcm
enu_bcm_status_t gl_enu_bcm_status_return = BCM_OKAY;
void app_init(void)
{
	LED_init(&gl_error_led);
  92:	84 e8       	ldi	r24, 0x84	; 132
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
	// init leds and check on their return
	
	if( (LED_init(&gl_str_send_complete_led) != LED_OK) || (LED_init(&gl_str_recieve_complete_led) != LED_OK))
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
  a2:	81 11       	cpse	r24, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <app_init+0x20>
  a6:	86 e8       	ldi	r24, 0x86	; 134
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	0e 94 ad 00 	call	0x15a	; 0x15a <LED_init>
  ae:	88 23       	and	r24, r24
  b0:	19 f0       	breq	.+6      	; 0xb8 <app_init+0x26>
	{
		gl_enu_app_state = BLOCKED;
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
	}
	
	
	
	gl_enu_bcm_status_return = bcm_init(&gl_str_bcm_instance_app);
  b8:	85 e7       	ldi	r24, 0x75	; 117
  ba:	91 e0       	ldi	r25, 0x01	; 1
  bc:	0e 94 42 03 	call	0x684	; 0x684 <bcm_init>
  c0:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
	if((gl_enu_bcm_status_return == BCM_OKAY) && (gl_enu_app_state != BLOCKED))
  c4:	81 11       	cpse	r24, r1
  c6:	1a c0       	rjmp	.+52     	; 0xfc <app_init+0x6a>
  c8:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <gl_enu_app_state>
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	b1 f0       	breq	.+44     	; 0xfc <app_init+0x6a>
	{
		gl_enu_bcm_status_return = bcm_send_n(&gl_str_bcm_instance_app,gl_send_string_to_dest,strlen(gl_send_string_to_dest));
  d0:	e0 e6       	ldi	r30, 0x60	; 96
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	01 90       	ld	r0, Z+
  d6:	00 20       	and	r0, r0
  d8:	e9 f7       	brne	.-6      	; 0xd4 <app_init+0x42>
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	af 01       	movw	r20, r30
  de:	40 56       	subi	r20, 0x60	; 96
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	60 e6       	ldi	r22, 0x60	; 96
  e4:	70 e0       	ldi	r23, 0x00	; 0
  e6:	85 e7       	ldi	r24, 0x75	; 117
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	0e 94 81 03 	call	0x702	; 0x702 <bcm_send_n>
  ee:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
		if(gl_enu_bcm_status_return != BCM_OKAY)
  f2:	88 23       	and	r24, r24
  f4:	19 f0       	breq	.+6      	; 0xfc <app_init+0x6a>
		{
			gl_enu_app_state = BLOCKED;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
  fc:	08 95       	ret

000000fe <app_start>:
	
}

void app_start(void)
{
	switch(gl_enu_app_state)
  fe:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <gl_enu_app_state>
 102:	88 23       	and	r24, r24
 104:	19 f0       	breq	.+6      	; 0x10c <app_start+0xe>
 106:	81 30       	cpi	r24, 0x01	; 1
 108:	19 f1       	breq	.+70     	; 0x150 <app_start+0x52>
 10a:	08 95       	ret
	{
		case IDLE :
		{
			gl_enu_bcm_status_return = bcm_dispatcher(&gl_str_bcm_instance_app);
 10c:	85 e7       	ldi	r24, 0x75	; 117
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0e 94 af 03 	call	0x75e	; 0x75e <bcm_dispatcher>
 114:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
			if(gl_enu_bcm_status_return == SEND_OPERATION_DONE)
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	29 f4       	brne	.+10     	; 0x126 <app_start+0x28>
			{
				LED_toggle(&gl_str_send_complete_led);
 11c:	80 e8       	ldi	r24, 0x80	; 128
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 124:	08 95       	ret
			}
			else if(gl_enu_bcm_status_return == REC_OPERATION_DONE)
 126:	84 30       	cpi	r24, 0x04	; 4
 128:	69 f4       	brne	.+26     	; 0x144 <app_start+0x46>
			{
				if(!strcmp(gl_rec_string_from_dest,gl_recieve_arr))
 12a:	63 e8       	ldi	r22, 0x83	; 131
 12c:	71 e0       	ldi	r23, 0x01	; 1
 12e:	8e e6       	ldi	r24, 0x6E	; 110
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 c5 03 	call	0x78a	; 0x78a <strcmp>
 136:	89 2b       	or	r24, r25
 138:	79 f4       	brne	.+30     	; 0x158 <app_start+0x5a>
				{
					LED_toggle(&gl_str_recieve_complete_led);
 13a:	86 e8       	ldi	r24, 0x86	; 134
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 142:	08 95       	ret
				}
				
			}
			
			else if(gl_enu_bcm_status_return == NULL_POINTER)
 144:	82 30       	cpi	r24, 0x02	; 2
 146:	41 f4       	brne	.+16     	; 0x158 <app_start+0x5a>
			{
				gl_enu_app_state = BLOCKED;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <gl_enu_app_state>
 14e:	08 95       	ret
			break;
		}
		
		case BLOCKED :
		{
			LED_toggle(&gl_error_led);
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 b6 00 	call	0x16c	; 0x16c <LED_toggle>
 158:	08 95       	ret

0000015a <LED_init>:
	else return LED_NOT_OK;
}
enu_led_error_t LED_off(str_led_config_t *str_ptr_led_config){
	if(!DIO_write(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber,LOW))return LED_OK;
	else return LED_NOT_OK;
}
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	61 81       	ldd	r22, Z+1	; 0x01
 160:	80 81       	ld	r24, Z
 162:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_init>
 166:	81 11       	cpse	r24, r1
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	08 95       	ret

0000016c <LED_toggle>:
enu_led_error_t LED_toggle(str_led_config_t *str_ptr_led_config){
	if(!DIO_toggle(str_ptr_led_config->pinNumber,str_ptr_led_config->portNumber))return LED_OK;
 16c:	fc 01       	movw	r30, r24
 16e:	61 81       	ldd	r22, Z+1	; 0x01
 170:	80 81       	ld	r24, Z
 172:	0e 94 62 01 	call	0x2c4	; 0x2c4 <DIO_toggle>
 176:	81 11       	cpse	r24, r1
	else return LED_NOT_OK;
 178:	81 e0       	ldi	r24, 0x01	; 1
}
 17a:	08 95       	ret

0000017c <main>:
#include "App/app.h"


int main(void)
{
   app_init();
 17c:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 180:	0e 94 7f 00 	call	0xfe	; 0xfe <app_start>
 184:	fd cf       	rjmp	.-6      	; 0x180 <main+0x4>

00000186 <DIO_init>:
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
}
 186:	88 30       	cpi	r24, 0x08	; 8
 188:	08 f0       	brcs	.+2      	; 0x18c <DIO_init+0x6>
 18a:	90 c0       	rjmp	.+288    	; 0x2ac <DIO_init+0x126>
 18c:	61 30       	cpi	r22, 0x01	; 1
 18e:	51 f1       	breq	.+84     	; 0x1e4 <DIO_init+0x5e>
 190:	38 f0       	brcs	.+14     	; 0x1a0 <DIO_init+0x1a>
 192:	62 30       	cpi	r22, 0x02	; 2
 194:	09 f4       	brne	.+2      	; 0x198 <DIO_init+0x12>
 196:	48 c0       	rjmp	.+144    	; 0x228 <DIO_init+0xa2>
 198:	63 30       	cpi	r22, 0x03	; 3
 19a:	09 f4       	brne	.+2      	; 0x19e <DIO_init+0x18>
 19c:	66 c0       	rjmp	.+204    	; 0x26a <DIO_init+0xe4>
 19e:	88 c0       	rjmp	.+272    	; 0x2b0 <DIO_init+0x12a>
 1a0:	41 11       	cpse	r20, r1
 1a2:	0f c0       	rjmp	.+30     	; 0x1c2 <DIO_init+0x3c>
 1a4:	4a b3       	in	r20, 0x1a	; 26
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_init+0x2c>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_init+0x28>
 1b6:	cb 01       	movw	r24, r22
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	08 95       	ret
 1c2:	41 30       	cpi	r20, 0x01	; 1
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <DIO_init+0x42>
 1c6:	76 c0       	rjmp	.+236    	; 0x2b4 <DIO_init+0x12e>
 1c8:	4a b3       	in	r20, 0x1a	; 26
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_init+0x50>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_init+0x4c>
 1da:	cb 01       	movw	r24, r22
 1dc:	84 2b       	or	r24, r20
 1de:	8a bb       	out	0x1a, r24	; 26
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret
 1e4:	41 11       	cpse	r20, r1
 1e6:	0f c0       	rjmp	.+30     	; 0x206 <DIO_init+0x80>
 1e8:	47 b3       	in	r20, 0x17	; 23
 1ea:	21 e0       	ldi	r18, 0x01	; 1
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	b9 01       	movw	r22, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_init+0x70>
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	8a 95       	dec	r24
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_init+0x6c>
 1fa:	cb 01       	movw	r24, r22
 1fc:	80 95       	com	r24
 1fe:	84 23       	and	r24, r20
 200:	87 bb       	out	0x17, r24	; 23
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	09 f0       	breq	.+2      	; 0x20c <DIO_init+0x86>
 20a:	56 c0       	rjmp	.+172    	; 0x2b8 <DIO_init+0x132>
 20c:	47 b3       	in	r20, 0x17	; 23
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_init+0x94>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_init+0x90>
 21e:	cb 01       	movw	r24, r22
 220:	84 2b       	or	r24, r20
 222:	87 bb       	out	0x17, r24	; 23
 224:	80 e0       	ldi	r24, 0x00	; 0
 226:	08 95       	ret
 228:	41 11       	cpse	r20, r1
 22a:	0f c0       	rjmp	.+30     	; 0x24a <DIO_init+0xc4>
 22c:	44 b3       	in	r20, 0x14	; 20
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	30 e0       	ldi	r19, 0x00	; 0
 232:	b9 01       	movw	r22, r18
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_init+0xb4>
 236:	66 0f       	add	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	8a 95       	dec	r24
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_init+0xb0>
 23e:	cb 01       	movw	r24, r22
 240:	80 95       	com	r24
 242:	84 23       	and	r24, r20
 244:	84 bb       	out	0x14, r24	; 20
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	08 95       	ret
 24a:	41 30       	cpi	r20, 0x01	; 1
 24c:	b9 f5       	brne	.+110    	; 0x2bc <DIO_init+0x136>
 24e:	44 b3       	in	r20, 0x14	; 20
 250:	21 e0       	ldi	r18, 0x01	; 1
 252:	30 e0       	ldi	r19, 0x00	; 0
 254:	b9 01       	movw	r22, r18
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_init+0xd6>
 258:	66 0f       	add	r22, r22
 25a:	77 1f       	adc	r23, r23
 25c:	8a 95       	dec	r24
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_init+0xd2>
 260:	cb 01       	movw	r24, r22
 262:	84 2b       	or	r24, r20
 264:	84 bb       	out	0x14, r24	; 20
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	08 95       	ret
 26a:	41 11       	cpse	r20, r1
 26c:	0f c0       	rjmp	.+30     	; 0x28c <DIO_init+0x106>
 26e:	41 b3       	in	r20, 0x11	; 17
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_init+0xf6>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_init+0xf2>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	81 bb       	out	0x11, r24	; 17
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	08 95       	ret
 28c:	41 30       	cpi	r20, 0x01	; 1
 28e:	c1 f4       	brne	.+48     	; 0x2c0 <DIO_init+0x13a>
 290:	41 b3       	in	r20, 0x11	; 17
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_init+0x118>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	8a 95       	dec	r24
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_init+0x114>
 2a2:	cb 01       	movw	r24, r22
 2a4:	84 2b       	or	r24, r20
 2a6:	81 bb       	out	0x11, r24	; 17
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	08 95       	ret
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	08 95       	ret
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	08 95       	ret
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	08 95       	ret
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	08 95       	ret

000002c4 <DIO_toggle>:
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 2c4:	88 30       	cpi	r24, 0x08	; 8
 2c6:	08 f0       	brcs	.+2      	; 0x2ca <DIO_toggle+0x6>
 2c8:	40 c0       	rjmp	.+128    	; 0x34a <DIO_toggle+0x86>
	switch(portNumber){
 2ca:	61 30       	cpi	r22, 0x01	; 1
 2cc:	a1 f0       	breq	.+40     	; 0x2f6 <DIO_toggle+0x32>
 2ce:	28 f0       	brcs	.+10     	; 0x2da <DIO_toggle+0x16>
 2d0:	62 30       	cpi	r22, 0x02	; 2
 2d2:	f9 f0       	breq	.+62     	; 0x312 <DIO_toggle+0x4e>
 2d4:	63 30       	cpi	r22, 0x03	; 3
 2d6:	59 f1       	breq	.+86     	; 0x32e <DIO_toggle+0x6a>
 2d8:	3a c0       	rjmp	.+116    	; 0x34e <DIO_toggle+0x8a>
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
 2da:	4b b3       	in	r20, 0x1b	; 27
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_toggle+0x24>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_toggle+0x20>
 2ec:	cb 01       	movw	r24, r22
 2ee:	84 27       	eor	r24, r20
 2f0:	8b bb       	out	0x1b, r24	; 27
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 2f2:	80 e0       	ldi	r24, 0x00	; 0
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
	switch(portNumber){
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
 2f4:	08 95       	ret
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
 2f6:	48 b3       	in	r20, 0x18	; 24
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_toggle+0x40>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_toggle+0x3c>
 308:	cb 01       	movw	r24, r22
 30a:	84 27       	eor	r24, r20
 30c:	88 bb       	out	0x18, r24	; 24
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 30e:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTA:
		TOGGLE_BIT(PORTA,pinNumber);
		break;
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
 310:	08 95       	ret
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
 312:	45 b3       	in	r20, 0x15	; 21
 314:	21 e0       	ldi	r18, 0x01	; 1
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	b9 01       	movw	r22, r18
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_toggle+0x5c>
 31c:	66 0f       	add	r22, r22
 31e:	77 1f       	adc	r23, r23
 320:	8a 95       	dec	r24
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_toggle+0x58>
 324:	cb 01       	movw	r24, r22
 326:	84 27       	eor	r24, r20
 328:	85 bb       	out	0x15, r24	; 21
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 32a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTB:
		TOGGLE_BIT(PORTB,pinNumber);
		break;
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
 32c:	08 95       	ret
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
 32e:	42 b3       	in	r20, 0x12	; 18
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_toggle+0x78>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	8a 95       	dec	r24
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_toggle+0x74>
 340:	cb 01       	movw	r24, r22
 342:	84 27       	eor	r24, r20
 344:	82 bb       	out	0x12, r24	; 18
		break;
		default:
		return DIO_NOT_OK; //handle port number error
	}
	
	return DIO_OK;
 346:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PORTC:
		TOGGLE_BIT(PORTC,pinNumber);
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
 348:	08 95       	ret
Description : This function toggles PIN level
ARGS        : take PIN Number and PORT Number
return      : return DIO_OK if the PIN toggles correctly, DIO_NOT_OK otherwise
*/
EN_DIO_ERROR DIO_toggle(EN_DIO_PINS pinNumber,EN_DIO_PORTS portNumber){
	if(pinNumber>7 || pinNumber < 0) return DIO_NOT_OK; // handle pin number error
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	08 95       	ret
		break;
		case DIO_PORTD:
		TOGGLE_BIT(PORTD,pinNumber);
		break;
		default:
		return DIO_NOT_OK; //handle port number error
 34e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	return DIO_OK;
}
 350:	08 95       	ret

00000352 <insert_queue>:
		USART_recieve_byte(&uint8_arg_arr_bytes[uint8_loc_counter]);
		uint8_loc_counter++;
	}
	
	return STATUS_OK;
}
 352:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 356:	99 23       	and	r25, r25
 358:	14 f4       	brge	.+4      	; 0x35e <insert_queue+0xc>
 35a:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 35e:	a2 e5       	ldi	r26, 0x52	; 82
 360:	b1 e0       	ldi	r27, 0x01	; 1
 362:	ec 91       	ld	r30, X
 364:	ef 5f       	subi	r30, 0xFF	; 255
 366:	ec 93       	st	X, r30
 368:	0e 2e       	mov	r0, r30
 36a:	00 0c       	add	r0, r0
 36c:	ff 0b       	sbc	r31, r31
 36e:	e7 57       	subi	r30, 0x77	; 119
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	80 83       	st	Z, r24
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	08 95       	ret

00000378 <truncate_queue>:
 378:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 37c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <str_gl_usart_tasks_queue+0xc9>
 380:	8e 17       	cp	r24, r30
 382:	14 f0       	brlt	.+4      	; 0x388 <truncate_queue+0x10>
 384:	ef 3f       	cpi	r30, 0xFF	; 255
 386:	39 f4       	brne	.+14     	; 0x396 <truncate_queue+0x1e>
 388:	8f ef       	ldi	r24, 0xFF	; 255
 38a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <str_gl_usart_tasks_queue+0xc8>
 38e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <str_gl_usart_tasks_queue+0xc9>
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	08 95       	ret
 396:	0e 2e       	mov	r0, r30
 398:	00 0c       	add	r0, r0
 39a:	ff 0b       	sbc	r31, r31
 39c:	e7 57       	subi	r30, 0x77	; 119
 39e:	ff 4f       	sbci	r31, 0xFF	; 255
 3a0:	80 81       	ld	r24, Z
 3a2:	8c b9       	out	0x0c, r24	; 12
 3a4:	e1 e5       	ldi	r30, 0x51	; 81
 3a6:	f1 e0       	ldi	r31, 0x01	; 1
 3a8:	80 81       	ld	r24, Z
 3aa:	8f 5f       	subi	r24, 0xFF	; 255
 3ac:	80 83       	st	Z, r24
 3ae:	80 e0       	ldi	r24, 0x00	; 0
 3b0:	08 95       	ret

000003b2 <USART_setCallBack>:
 3b2:	61 15       	cp	r22, r1
 3b4:	71 05       	cpc	r23, r1
 3b6:	89 f0       	breq	.+34     	; 0x3da <USART_setCallBack+0x28>
 3b8:	88 23       	and	r24, r24
 3ba:	19 f0       	breq	.+6      	; 0x3c2 <USART_setCallBack+0x10>
 3bc:	81 30       	cpi	r24, 0x01	; 1
 3be:	39 f0       	breq	.+14     	; 0x3ce <USART_setCallBack+0x1c>
 3c0:	0e c0       	rjmp	.+28     	; 0x3de <USART_setCallBack+0x2c>
 3c2:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <ptr_USART_send+0x1>
 3c6:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <ptr_USART_send>
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	08 95       	ret
 3ce:	70 93 4c 02 	sts	0x024C, r23	; 0x80024c <ptr_USART_recieve+0x1>
 3d2:	60 93 4b 02 	sts	0x024B, r22	; 0x80024b <ptr_USART_recieve>
 3d6:	80 e0       	ldi	r24, 0x00	; 0
 3d8:	08 95       	ret
 3da:	85 e0       	ldi	r24, 0x05	; 5
 3dc:	08 95       	ret
 3de:	85 e0       	ldi	r24, 0x05	; 5
 3e0:	08 95       	ret

000003e2 <USART_init>:
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	19 c0       	rjmp	.+50     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 3e6:	28 2f       	mov	r18, r24
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	f9 01       	movw	r30, r18
 3ec:	ee 0f       	add	r30, r30
 3ee:	ff 1f       	adc	r31, r31
 3f0:	e2 0f       	add	r30, r18
 3f2:	f3 1f       	adc	r31, r19
 3f4:	ee 0f       	add	r30, r30
 3f6:	ff 1f       	adc	r31, r31
 3f8:	ed 5a       	subi	r30, 0xAD	; 173
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	90 81       	ld	r25, Z
 3fe:	89 13       	cpse	r24, r25
 400:	0a c0       	rjmp	.+20     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 402:	f9 01       	movw	r30, r18
 404:	ee 0f       	add	r30, r30
 406:	ff 1f       	adc	r31, r31
 408:	e2 0f       	add	r30, r18
 40a:	f3 1f       	adc	r31, r19
 40c:	ee 0f       	add	r30, r30
 40e:	ff 1f       	adc	r31, r31
 410:	ed 5a       	subi	r30, 0xAD	; 173
 412:	fe 4f       	sbci	r31, 0xFE	; 254
 414:	05 c0       	rjmp	.+10     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 416:	8f 5f       	subi	r24, 0xFF	; 255
 418:	82 30       	cpi	r24, 0x02	; 2
 41a:	28 f3       	brcs	.-54     	; 0x3e6 <USART_init+0x4>
 41c:	e0 e0       	ldi	r30, 0x00	; 0
 41e:	f0 e0       	ldi	r31, 0x00	; 0
 420:	30 97       	sbiw	r30, 0x00	; 0
 422:	09 f4       	brne	.+2      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
 424:	92 c0       	rjmp	.+292    	; 0x54a <__EEPROM_REGION_LENGTH__+0x14a>
 426:	80 b5       	in	r24, 0x20	; 32
 428:	80 68       	ori	r24, 0x80	; 128
 42a:	80 bd       	out	0x20, r24	; 32
 42c:	91 81       	ldd	r25, Z+1	; 0x01
 42e:	99 23       	and	r25, r25
 430:	19 f0       	breq	.+6      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 432:	91 30       	cpi	r25, 0x01	; 1
 434:	29 f0       	breq	.+10     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 436:	08 c0       	rjmp	.+16     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 438:	8f 7b       	andi	r24, 0xBF	; 191
 43a:	80 bd       	out	0x20, r24	; 32
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 440:	80 64       	ori	r24, 0x40	; 64
 442:	80 bd       	out	0x20, r24	; 32
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	01 c0       	rjmp	.+2      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	81 11       	cpse	r24, r1
 44c:	16 c0       	rjmp	.+44     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 44e:	92 81       	ldd	r25, Z+2	; 0x02
 450:	91 30       	cpi	r25, 0x01	; 1
 452:	49 f0       	breq	.+18     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 454:	18 f0       	brcs	.+6      	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 456:	92 30       	cpi	r25, 0x02	; 2
 458:	59 f0       	breq	.+22     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 45a:	0e c0       	rjmp	.+28     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 45c:	9a b1       	in	r25, 0x0a	; 10
 45e:	9f 7e       	andi	r25, 0xEF	; 239
 460:	98 60       	ori	r25, 0x08	; 8
 462:	9a b9       	out	0x0a, r25	; 10
 464:	0a c0       	rjmp	.+20     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 466:	9a b1       	in	r25, 0x0a	; 10
 468:	90 61       	ori	r25, 0x10	; 16
 46a:	97 7f       	andi	r25, 0xF7	; 247
 46c:	9a b9       	out	0x0a, r25	; 10
 46e:	05 c0       	rjmp	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 470:	9a b1       	in	r25, 0x0a	; 10
 472:	98 61       	ori	r25, 0x18	; 24
 474:	9a b9       	out	0x0a, r25	; 10
 476:	01 c0       	rjmp	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 478:	82 e0       	ldi	r24, 0x02	; 2
 47a:	81 11       	cpse	r24, r1
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 47e:	93 81       	ldd	r25, Z+3	; 0x03
 480:	91 30       	cpi	r25, 0x01	; 1
 482:	41 f0       	breq	.+16     	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 484:	58 f0       	brcs	.+22     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 486:	92 30       	cpi	r25, 0x02	; 2
 488:	69 f4       	brne	.+26     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 48a:	90 b5       	in	r25, 0x20	; 32
 48c:	9f 7e       	andi	r25, 0xEF	; 239
 48e:	90 62       	ori	r25, 0x20	; 32
 490:	90 bd       	out	0x20, r25	; 32
 492:	09 c0       	rjmp	.+18     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 494:	90 b5       	in	r25, 0x20	; 32
 496:	90 63       	ori	r25, 0x30	; 48
 498:	90 bd       	out	0x20, r25	; 32
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 49c:	90 b5       	in	r25, 0x20	; 32
 49e:	9f 7c       	andi	r25, 0xCF	; 207
 4a0:	90 bd       	out	0x20, r25	; 32
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a4:	82 e0       	ldi	r24, 0x02	; 2
 4a6:	81 11       	cpse	r24, r1
 4a8:	0f c0       	rjmp	.+30     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4aa:	94 81       	ldd	r25, Z+4	; 0x04
 4ac:	99 23       	and	r25, r25
 4ae:	19 f0       	breq	.+6      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4b0:	91 30       	cpi	r25, 0x01	; 1
 4b2:	29 f0       	breq	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	08 c0       	rjmp	.+16     	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 4b6:	90 b5       	in	r25, 0x20	; 32
 4b8:	97 7f       	andi	r25, 0xF7	; 247
 4ba:	90 bd       	out	0x20, r25	; 32
 4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4be:	90 b5       	in	r25, 0x20	; 32
 4c0:	98 60       	ori	r25, 0x08	; 8
 4c2:	90 bd       	out	0x20, r25	; 32
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4c6:	82 e0       	ldi	r24, 0x02	; 2
 4c8:	81 11       	cpse	r24, r1
 4ca:	34 c0       	rjmp	.+104    	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4cc:	95 81       	ldd	r25, Z+5	; 0x05
 4ce:	92 30       	cpi	r25, 0x02	; 2
 4d0:	d1 f0       	breq	.+52     	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 4d2:	28 f4       	brcc	.+10     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4d4:	99 23       	and	r25, r25
 4d6:	41 f0       	breq	.+16     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4d8:	91 30       	cpi	r25, 0x01	; 1
 4da:	69 f0       	breq	.+26     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4dc:	2a c0       	rjmp	.+84     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4de:	93 30       	cpi	r25, 0x03	; 3
 4e0:	d1 f0       	breq	.+52     	; 0x516 <__EEPROM_REGION_LENGTH__+0x116>
 4e2:	94 30       	cpi	r25, 0x04	; 4
 4e4:	f9 f0       	breq	.+62     	; 0x524 <__EEPROM_REGION_LENGTH__+0x124>
 4e6:	25 c0       	rjmp	.+74     	; 0x532 <__EEPROM_REGION_LENGTH__+0x132>
 4e8:	90 b5       	in	r25, 0x20	; 32
 4ea:	99 7f       	andi	r25, 0xF9	; 249
 4ec:	90 bd       	out	0x20, r25	; 32
 4ee:	9a b1       	in	r25, 0x0a	; 10
 4f0:	9b 7f       	andi	r25, 0xFB	; 251
 4f2:	9a b9       	out	0x0a, r25	; 10
 4f4:	1f c0       	rjmp	.+62     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 4f6:	90 b5       	in	r25, 0x20	; 32
 4f8:	92 60       	ori	r25, 0x02	; 2
 4fa:	9b 7f       	andi	r25, 0xFB	; 251
 4fc:	90 bd       	out	0x20, r25	; 32
 4fe:	9a b1       	in	r25, 0x0a	; 10
 500:	9b 7f       	andi	r25, 0xFB	; 251
 502:	9a b9       	out	0x0a, r25	; 10
 504:	17 c0       	rjmp	.+46     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 506:	90 b5       	in	r25, 0x20	; 32
 508:	9d 7f       	andi	r25, 0xFD	; 253
 50a:	94 60       	ori	r25, 0x04	; 4
 50c:	90 bd       	out	0x20, r25	; 32
 50e:	9a b1       	in	r25, 0x0a	; 10
 510:	9b 7f       	andi	r25, 0xFB	; 251
 512:	9a b9       	out	0x0a, r25	; 10
 514:	0f c0       	rjmp	.+30     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 516:	90 b5       	in	r25, 0x20	; 32
 518:	96 60       	ori	r25, 0x06	; 6
 51a:	90 bd       	out	0x20, r25	; 32
 51c:	9a b1       	in	r25, 0x0a	; 10
 51e:	9b 7f       	andi	r25, 0xFB	; 251
 520:	9a b9       	out	0x0a, r25	; 10
 522:	08 c0       	rjmp	.+16     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 524:	90 b5       	in	r25, 0x20	; 32
 526:	96 60       	ori	r25, 0x06	; 6
 528:	90 bd       	out	0x20, r25	; 32
 52a:	9a b1       	in	r25, 0x0a	; 10
 52c:	94 60       	ori	r25, 0x04	; 4
 52e:	9a b9       	out	0x0a, r25	; 10
 530:	01 c0       	rjmp	.+2      	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
 532:	82 e0       	ldi	r24, 0x02	; 2
 534:	9a b1       	in	r25, 0x0a	; 10
 536:	90 6c       	ori	r25, 0xC0	; 192
 538:	9a b9       	out	0x0a, r25	; 10
 53a:	78 94       	sei
 53c:	9b b1       	in	r25, 0x0b	; 11
 53e:	9d 7f       	andi	r25, 0xFD	; 253
 540:	9b b9       	out	0x0b, r25	; 11
 542:	93 e3       	ldi	r25, 0x33	; 51
 544:	99 b9       	out	0x09, r25	; 9
 546:	10 bc       	out	0x20, r1	; 32
 548:	08 95       	ret
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	08 95       	ret

0000054e <USART_send_byte>:
 54e:	cf 93       	push	r28
 550:	0e 94 a9 01 	call	0x352	; 0x352 <insert_queue>
 554:	c8 2f       	mov	r28, r24
 556:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 55a:	8c 2f       	mov	r24, r28
 55c:	cf 91       	pop	r28
 55e:	08 95       	ret

00000560 <USART_send_n_bytes>:
 560:	ff 92       	push	r15
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	df 93       	push	r29
 56a:	00 97       	sbiw	r24, 0x00	; 0
 56c:	a1 f0       	breq	.+40     	; 0x596 <USART_send_n_bytes+0x36>
 56e:	f6 2e       	mov	r15, r22
 570:	8c 01       	movw	r16, r24
 572:	c0 e0       	ldi	r28, 0x00	; 0
 574:	d0 e0       	ldi	r29, 0x00	; 0
 576:	0a c0       	rjmp	.+20     	; 0x58c <USART_send_n_bytes+0x2c>
 578:	f8 01       	movw	r30, r16
 57a:	ec 0f       	add	r30, r28
 57c:	f1 1d       	adc	r31, r1
 57e:	80 81       	ld	r24, Z
 580:	0e 94 a9 01 	call	0x352	; 0x352 <insert_queue>
 584:	d8 2f       	mov	r29, r24
 586:	81 11       	cpse	r24, r1
 588:	03 c0       	rjmp	.+6      	; 0x590 <USART_send_n_bytes+0x30>
 58a:	cf 5f       	subi	r28, 0xFF	; 255
 58c:	cf 15       	cp	r28, r15
 58e:	a0 f3       	brcs	.-24     	; 0x578 <USART_send_n_bytes+0x18>
 590:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 594:	01 c0       	rjmp	.+2      	; 0x598 <USART_send_n_bytes+0x38>
 596:	d5 e0       	ldi	r29, 0x05	; 5
 598:	8d 2f       	mov	r24, r29
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	08 95       	ret

000005a6 <__vector_13>:
	



ISR(USART_RXC_INT)
{
 5a6:	1f 92       	push	r1
 5a8:	0f 92       	push	r0
 5aa:	0f b6       	in	r0, 0x3f	; 63
 5ac:	0f 92       	push	r0
 5ae:	11 24       	eor	r1, r1
 5b0:	2f 93       	push	r18
 5b2:	3f 93       	push	r19
 5b4:	4f 93       	push	r20
 5b6:	5f 93       	push	r21
 5b8:	6f 93       	push	r22
 5ba:	7f 93       	push	r23
 5bc:	8f 93       	push	r24
 5be:	9f 93       	push	r25
 5c0:	af 93       	push	r26
 5c2:	bf 93       	push	r27
 5c4:	ef 93       	push	r30
 5c6:	ff 93       	push	r31
	

	if(gl_recieve_index < gl_recieve_size)
 5c8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <gl_recieve_index>
 5cc:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <gl_recieve_size>
 5d0:	89 17       	cp	r24, r25
 5d2:	48 f4       	brcc	.+18     	; 0x5e6 <__vector_13+0x40>
	{
		gl_recieve_arr[gl_recieve_index] = UDR ;
 5d4:	e8 2f       	mov	r30, r24
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	2c b1       	in	r18, 0x0c	; 12
 5da:	ed 57       	subi	r30, 0x7D	; 125
 5dc:	fe 4f       	sbci	r31, 0xFE	; 254
 5de:	20 83       	st	Z, r18
		gl_recieve_index++;
 5e0:	8f 5f       	subi	r24, 0xFF	; 255
 5e2:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <gl_recieve_index>
	}
	 
	if(gl_recieve_index == gl_recieve_size)
 5e6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <gl_recieve_index>
 5ea:	98 13       	cpse	r25, r24
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <__vector_13+0x56>
	{
		 gl_recieve_index = 0;
 5ee:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <gl_recieve_index>
		 ptr_USART_recieve();
 5f2:	e0 91 4b 02 	lds	r30, 0x024B	; 0x80024b <ptr_USART_recieve>
 5f6:	f0 91 4c 02 	lds	r31, 0x024C	; 0x80024c <ptr_USART_recieve+0x1>
 5fa:	09 95       	icall
		
	} 

	
}
 5fc:	ff 91       	pop	r31
 5fe:	ef 91       	pop	r30
 600:	bf 91       	pop	r27
 602:	af 91       	pop	r26
 604:	9f 91       	pop	r25
 606:	8f 91       	pop	r24
 608:	7f 91       	pop	r23
 60a:	6f 91       	pop	r22
 60c:	5f 91       	pop	r21
 60e:	4f 91       	pop	r20
 610:	3f 91       	pop	r19
 612:	2f 91       	pop	r18
 614:	0f 90       	pop	r0
 616:	0f be       	out	0x3f, r0	; 63
 618:	0f 90       	pop	r0
 61a:	1f 90       	pop	r1
 61c:	18 95       	reti

0000061e <__vector_15>:
	
ISR(USART_TXC_INT)
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	3f 93       	push	r19
 62c:	4f 93       	push	r20
 62e:	5f 93       	push	r21
 630:	6f 93       	push	r22
 632:	7f 93       	push	r23
 634:	8f 93       	push	r24
 636:	9f 93       	push	r25
 638:	af 93       	push	r26
 63a:	bf 93       	push	r27
 63c:	ef 93       	push	r30
 63e:	ff 93       	push	r31
	if (truncate_queue()==QUEUE_EMPTY)
 640:	0e 94 bc 01 	call	0x378	; 0x378 <truncate_queue>
 644:	84 30       	cpi	r24, 0x04	; 4
 646:	29 f4       	brne	.+10     	; 0x652 <__vector_15+0x34>
	{
		ptr_USART_send();
 648:	e0 91 4d 02 	lds	r30, 0x024D	; 0x80024d <ptr_USART_send>
 64c:	f0 91 4e 02 	lds	r31, 0x024E	; 0x80024e <ptr_USART_send+0x1>
 650:	09 95       	icall
	}

 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	bf 91       	pop	r27
 658:	af 91       	pop	r26
 65a:	9f 91       	pop	r25
 65c:	8f 91       	pop	r24
 65e:	7f 91       	pop	r23
 660:	6f 91       	pop	r22
 662:	5f 91       	pop	r21
 664:	4f 91       	pop	r20
 666:	3f 91       	pop	r19
 668:	2f 91       	pop	r18
 66a:	0f 90       	pop	r0
 66c:	0f be       	out	0x3f, r0	; 63
 66e:	0f 90       	pop	r0
 670:	1f 90       	pop	r1
 672:	18 95       	reti

00000674 <bcm_send_done>:
		{
			enu_bcm_status_return = CHANNEL_ERROR;
		}
	}
	return enu_bcm_status_return;
}
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <gl_bcm_send_done>
 67a:	08 95       	ret

0000067c <bcm_recieve_done>:
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <gl_bcm_recieve_done>
 682:	08 95       	ret

00000684 <bcm_init>:
 684:	0f 93       	push	r16
 686:	1f 93       	push	r17
 688:	cf 93       	push	r28
 68a:	00 97       	sbiw	r24, 0x00	; 0
 68c:	99 f1       	breq	.+102    	; 0x6f4 <bcm_init+0x70>
 68e:	c0 e0       	ldi	r28, 0x00	; 0
 690:	2b c0       	rjmp	.+86     	; 0x6e8 <bcm_init+0x64>
 692:	dc 01       	movw	r26, r24
 694:	11 96       	adiw	r26, 0x01	; 1
 696:	6c 91       	ld	r22, X
 698:	4c 2f       	mov	r20, r28
 69a:	50 e0       	ldi	r21, 0x00	; 0
 69c:	fa 01       	movw	r30, r20
 69e:	ee 0f       	add	r30, r30
 6a0:	ff 1f       	adc	r31, r31
 6a2:	9a 01       	movw	r18, r20
 6a4:	22 0f       	add	r18, r18
 6a6:	33 1f       	adc	r19, r19
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	22 0f       	add	r18, r18
 6ae:	33 1f       	adc	r19, r19
 6b0:	e2 0f       	add	r30, r18
 6b2:	f3 1f       	adc	r31, r19
 6b4:	e1 5a       	subi	r30, 0xA1	; 161
 6b6:	fe 4f       	sbci	r31, 0xFE	; 254
 6b8:	21 81       	ldd	r18, Z+1	; 0x01
 6ba:	62 13       	cpse	r22, r18
 6bc:	14 c0       	rjmp	.+40     	; 0x6e6 <bcm_init+0x62>
 6be:	8f 01       	movw	r16, r30
 6c0:	02 80       	ldd	r0, Z+2	; 0x02
 6c2:	f3 81       	ldd	r31, Z+3	; 0x03
 6c4:	e0 2d       	mov	r30, r0
 6c6:	86 2f       	mov	r24, r22
 6c8:	09 95       	icall
 6ca:	f8 01       	movw	r30, r16
 6cc:	00 85       	ldd	r16, Z+8	; 0x08
 6ce:	11 85       	ldd	r17, Z+9	; 0x09
 6d0:	6a e3       	ldi	r22, 0x3A	; 58
 6d2:	73 e0       	ldi	r23, 0x03	; 3
 6d4:	80 e0       	ldi	r24, 0x00	; 0
 6d6:	f8 01       	movw	r30, r16
 6d8:	09 95       	icall
 6da:	6e e3       	ldi	r22, 0x3E	; 62
 6dc:	73 e0       	ldi	r23, 0x03	; 3
 6de:	81 e0       	ldi	r24, 0x01	; 1
 6e0:	f8 01       	movw	r30, r16
 6e2:	09 95       	icall
 6e4:	03 c0       	rjmp	.+6      	; 0x6ec <bcm_init+0x68>
 6e6:	cf 5f       	subi	r28, 0xFF	; 255
 6e8:	c2 30       	cpi	r28, 0x02	; 2
 6ea:	98 f2       	brcs	.-90     	; 0x692 <bcm_init+0xe>
 6ec:	c2 30       	cpi	r28, 0x02	; 2
 6ee:	21 f0       	breq	.+8      	; 0x6f8 <bcm_init+0x74>
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	03 c0       	rjmp	.+6      	; 0x6fa <bcm_init+0x76>
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	01 c0       	rjmp	.+2      	; 0x6fa <bcm_init+0x76>
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	cf 91       	pop	r28
 6fc:	1f 91       	pop	r17
 6fe:	0f 91       	pop	r16
 700:	08 95       	ret

00000702 <bcm_send_n>:
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	8c 01       	movw	r16, r24
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 70a:	c0 e0       	ldi	r28, 0x00	; 0
 70c:	1d c0       	rjmp	.+58     	; 0x748 <bcm_send_n+0x46>
	{
		if(ptr_str_bcm_instance->en_bcm_channel == str_bcm_instance[uint8_loc_counter].en_bcm_channel)
 70e:	f8 01       	movw	r30, r16
 710:	51 81       	ldd	r21, Z+1	; 0x01
 712:	ac 2f       	mov	r26, r28
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	fd 01       	movw	r30, r26
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	9d 01       	movw	r18, r26
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	22 0f       	add	r18, r18
 724:	33 1f       	adc	r19, r19
 726:	22 0f       	add	r18, r18
 728:	33 1f       	adc	r19, r19
 72a:	e2 0f       	add	r30, r18
 72c:	f3 1f       	adc	r31, r19
 72e:	e1 5a       	subi	r30, 0xA1	; 161
 730:	fe 4f       	sbci	r31, 0xFE	; 254
 732:	91 81       	ldd	r25, Z+1	; 0x01
 734:	59 13       	cpse	r21, r25
 736:	07 c0       	rjmp	.+14     	; 0x746 <bcm_send_n+0x44>
 738:	cb 01       	movw	r24, r22
		{
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
 73a:	06 80       	ldd	r0, Z+6	; 0x06
 73c:	f7 81       	ldd	r31, Z+7	; 0x07
 73e:	e0 2d       	mov	r30, r0
 740:	64 2f       	mov	r22, r20
 742:	09 95       	icall
			break;
 744:	03 c0       	rjmp	.+6      	; 0x74c <bcm_send_n+0x4a>
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	uint8_t uint8_loc_counter = 0 ;
	for(uint8_loc_counter = 0 ; uint8_loc_counter < BCM_INSTANCES ; uint8_loc_counter ++)
 746:	cf 5f       	subi	r28, 0xFF	; 255
 748:	c2 30       	cpi	r28, 0x02	; 2
 74a:	08 f3       	brcs	.-62     	; 0x70e <bcm_send_n+0xc>
			str_bcm_instance[uint8_loc_counter].str_bcm_functions_pointer.ptr_func_send_n(uint8_arg_bytes,uint8_arg_size);
			break;
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
 74c:	c2 30       	cpi	r28, 0x02	; 2
 74e:	11 f0       	breq	.+4      	; 0x754 <bcm_send_n+0x52>
	}
	return enu_bcm_status_return;
}
enu_bcm_status_t bcm_send_n (str_bcm_instance_t * ptr_str_bcm_instance ,uint8_t *uint8_arg_bytes,uint8_t uint8_arg_size)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	01 c0       	rjmp	.+2      	; 0x756 <bcm_send_n+0x54>
		}
	}
	
	if(uint8_loc_counter == BCM_INSTANCES)
	{
		enu_bcm_status_return = CHANNEL_ERROR;
 754:	81 e0       	ldi	r24, 0x01	; 1
	}
	return enu_bcm_status_return;

}
 756:	cf 91       	pop	r28
 758:	1f 91       	pop	r17
 75a:	0f 91       	pop	r16
 75c:	08 95       	ret

0000075e <bcm_dispatcher>:

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
 75e:	89 2b       	or	r24, r25
 760:	81 f0       	breq	.+32     	; 0x782 <bcm_dispatcher+0x24>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
 762:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <gl_bcm_send_done>
 766:	81 30       	cpi	r24, 0x01	; 1
 768:	21 f4       	brne	.+8      	; 0x772 <bcm_dispatcher+0x14>
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
		gl_bcm_send_done = 0;
 76a:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <gl_bcm_send_done>
	{
		 enu_bcm_status_return = NULL_POINTER;
	}
	else if(gl_bcm_send_done == 1)
	{
		enu_bcm_status_return = SEND_OPERATION_DONE;
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	08 95       	ret
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
 772:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <gl_bcm_recieve_done>
 776:	81 30       	cpi	r24, 0x01	; 1
 778:	31 f4       	brne	.+12     	; 0x786 <bcm_dispatcher+0x28>
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
 77a:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <gl_bcm_recieve_done>
		gl_bcm_send_done = 0;
	}
	
	else if(gl_bcm_recieve_done == 1)
	{
		enu_bcm_status_return = REC_OPERATION_DONE;
 77e:	84 e0       	ldi	r24, 0x04	; 4
 780:	08 95       	ret
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
	
	if(ptr_str_bcm_instance_t == NULL)
	{
		 enu_bcm_status_return = NULL_POINTER;
 782:	82 e0       	ldi	r24, 0x02	; 2
 784:	08 95       	ret

}

enu_bcm_status_t bcm_dispatcher (str_bcm_instance_t * ptr_str_bcm_instance_t)
{
	enu_bcm_status_t enu_bcm_status_return = BCM_OKAY;
 786:	80 e0       	ldi	r24, 0x00	; 0
		enu_bcm_status_return = REC_OPERATION_DONE;
		gl_bcm_recieve_done = 0;
	}
	
	return enu_bcm_status_return;
}
 788:	08 95       	ret

0000078a <strcmp>:
 78a:	fb 01       	movw	r30, r22
 78c:	dc 01       	movw	r26, r24
 78e:	8d 91       	ld	r24, X+
 790:	01 90       	ld	r0, Z+
 792:	80 19       	sub	r24, r0
 794:	01 10       	cpse	r0, r1
 796:	d9 f3       	breq	.-10     	; 0x78e <strcmp+0x4>
 798:	99 0b       	sbc	r25, r25
 79a:	08 95       	ret

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
